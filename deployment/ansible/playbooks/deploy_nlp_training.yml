- hosts: "{{ nlptraining }}"
  become: true
  vars:
    docker_img_hash: "{{ set_docker_img_hash | default('latest') }}"
    git_timestamp: "{{ set_git_timestamp | default('not specified') }}"
    app_build_number: "{{ set_app_build_number | default('not specified') }}"
    app_version: "{{ set_app_version | default('not specified') }}"
  roles:
    - role: docker
      tags: ["docker"]
    - role: gcloud-auth
      tags: ["gcloud-auth"]

  tasks:
    - name: Allow Docker to access Google Cloud Registry
      shell: gcloud --quiet auth configure-docker

    - name: Pull Docker Images
      docker_image:
        name: "{{ container_registry }}/{{ item }}:{{ docker_img_hash }}"
        source: pull
      with_items:
        - kg-appserver
        - kg-webserver
      tags:
        - deploy

    - name: Copy docker-compose files
      copy:
        src: "./files/{{ item }}"
        dest: "{{ deploy_dir }}"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: u=rw,g=r,o=r
      with_items:
        - docker-compose.yml
        - docker-compose.prod.yml
      tags:
        - deploy

    - name: Create .env file
      copy:
        content: |
          GITHUB_COMMIT_TIMESTAMP={{ git_timestamp }}
          ELASTICSEARCH_HOSTS={{ ELASTICSEARCH_HOSTS }}
          ELASTIC_FILE_INDEX_ID={{ elastic_file_content_index_id }}
          POSTGRES_HOST={{ POSTGRES_HOST }}
          POSTGRES_PORT={{ POSTGRES_PORT }}
          POSTGRES_USER={{ POSTGRES_USER }}
          POSTGRES_PASSWORD={{ POSTGRES_PASSWORD }}
          POSTGRES_DB={{ POSTGRES_DB }}
          NEO4J_HOST={{ NEO4J_HOST }}
          NEO4J_AUTH={{ NEO4J_AUTH }}
          FLASK_APP={{ FLASK_APP }}
          FLASK_APP_CONFIG={{ FLASK_APP_CONFIG }}
          FLASK_ENV={{ FLASK_ENV }}
          PROJECT_ID={{ PROJECT_ID }}
          CLOUD_SQL_ALIAS={{ CLOUD_SQL_ALIAS }}
          GCE_BACKUP_BUCKET={{ GCE_BACKUP_BUCKET }}
          SENTRY_KEY={{ SENTRY_KEY }}
          REDIS_HOST={{ REDIS_HOST }}
          REDIS_PORT={{ REDIS_PORT }}
          DOMAIN={{ DOMAIN }}
          GITHUB_HASH={{ docker_img_hash }}
          APP_VERSION={{ app_version }}
          APP_BUILD_NUMBER={{ app_build_number }}
        dest: "{{ deploy_dir }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: u=rw,g=r,o=r
      tags:
        - deploy

    - name: Stop any previous containers
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose -f docker-compose.yml -f docker-compose.prod.yml down"

    - name: Start docker
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d"
      tags:
        - deploy

    - name: Prune unused images
      shell:
        "docker image prune -a -f"
      tags:
        - deploy

    - name: Run database migrations and backups
      block:
        - name: Fetch cloud_sql_service_account
          shell: "gcloud sql instances describe --format='value(serviceAccountEmailAddress)' {{ CLOUD_SQL_ALIAS }}"
          register: cloud_sql_bucket_account

        - name: Grant access to Google Cloud Bucket Storage
          shell: "gsutil acl ch -u {{ cloud_sql_bucket_account.stdout }}:W gs://{{ GCE_BACKUP_BUCKET }}"

        - name: Generate backup ID
          shell: "echo {{ CLOUD_SQL_ALIAS }}_$(date +%Y%m%d_%H-%M-%S).sqldump.gz"
          register: BACKUP_ID

        - name: Generate backup
          shell: "gcloud sql export sql {{ CLOUD_SQL_ALIAS }} gs://{{ GCE_BACKUP_BUCKET }}/{{ BACKUP_ID.stdout }} --database={{ POSTGRES_DB }}"

        - name: Run the migration
          shell:
            chdir: "{{ deploy_dir }}"
            cmd: "docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec -T appserver bin/migrate-db --upgrade --data-migrate"
      when: CLOUD_BACKUP|bool
      tags:
        - deploy

    - name: Create/Update LMDB database
      include_role:
        name: lmdb
        apply:
          tags:
            - always
      tags:
        - lmdb
        - deploy

    - name: Seed Elasticsearch with Global Annotations
      include_role:
        name: global-annotation
        apply:
          tags:
            - always
      tags:
        - annotation
        - deploy

    - name: Warm up LMDB
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec -T appserver python3 neo4japp/services/annotations/warm_up/lmdb_warmup.py"
      tags:
        - deploy
