- include_vars: gcp_bucket_credentials.yml
- include_vars: healthcheck.yml

- name: Install Python System dependencies
  become: yes
  pip:
    name:
      - boto
      - virtualenv
    umask: "0022"

- name: Install Python dependencies
  become_user: "{{ deploy_user }}"
  pip:
    name:
      - sqlalchemy
      - google-cloud-storage
      - psycopg2-binary
      - six>1.13.0
      - google-api-python-client
      - oauth2client
      - pytz
    umask: "0022"
    virtualenv: "{{ deploy_dir }}/.venv"
    virtualenv_command: "virtualenv"
    virtualenv_python: python3

- name: Create LMDB Database Directories
  file:
    path: "{{ lmdb_path }}/{{ item }}"
    state: directory
    owner: "{{ deploy_user }}"
    group: 1000
  loop:
    - anatomy
    - chemicals
    - compounds
    - diseases
    - foods
    - genes
    - phenotypes
    - proteins
    - species

- name: Fetch 'data.mdb' files
  gc_storage:
    bucket: lmdb_database
    object: "{{ item }}/data.mdb"
    dest: "{{ lmdb_path }}/{{ item }}/data.mdb"
    mode: get
    gs_access_key: "{{ gce_bucket_access_key }}"
    gs_secret_key: "{{ gce_bucket_secret_key }}"
    force: yes
  loop:
    - anatomy
    - chemicals
    - compounds
    - diseases
    - foods
    - genes
    - phenotypes
    - proteins
    - species

- name: Fetch 'lock.mdb' files
  gc_storage:
    bucket: lmdb_database
    object: "{{ item }}/lock.mdb"
    dest: "{{ lmdb_path }}/{{ item }}/lock.mdb"
    mode: get
    gs_access_key: "{{ gce_bucket_access_key }}"
    gs_secret_key: "{{ gce_bucket_secret_key }}"
    force: yes
  loop:
    - anatomy
    - chemicals
    - compounds
    - diseases
    - foods
    - genes
    - phenotypes
    - proteins
    - species

- name: Set user permission
  file:
    path: "{{ lmdb_path }}"
    owner: "{{ deploy_user }}"
    group: 1000
    mode: u=rwx,g=rwx,o=r
    recurse: yes
    state: directory

- name: Copy LMDB PubSub Script
  copy:
    src: "./files/lmdb_pubsub.py"
    dest: "{{ deploy_dir }}"
    owner: "{{ deploy_user }}"
    group: "{{ deploy_user }}"
    mode: a+x

- name: Stop old LMDB PubSub Tasks
  become_user: "{{ deploy_user }}"
  shell: pkill -f lmdb_pubsub.py
  ignore_errors: true

- name: Run LMDB PubSub Script
  become_user: "{{ deploy_user }}"
  shell: "nohup {{ deploy_dir}}/.venv/bin/python3 -u lmdb_pubsub.py </dev/null >/dev/null 2>&1 &"
  args:
    chdir: "{{ deploy_dir }}"
  environment:
    POSTGRES_HOST: "{{ POSTGRES_HOST }}"
    POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
    POSTGRES_PORT: "{{ POSTGRES_PORT }}"
    POSTGRES_USER: "{{ POSTGRES_USER }}"
    POSTGRES_DB: "{{ POSTGRES_DB }}"
    HEALTHCHECK_URL: "{{ HEALTHCHECK_URL }}"
  register: outcome

- debug: msg="{{ outcome.stdout }}"
