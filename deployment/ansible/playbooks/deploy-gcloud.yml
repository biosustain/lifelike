- hosts: "{{ webserver }}"
  become: true
  vars:
    docker_img_hash: "{{ set_docker_img_hash | default('latest') }}"
    git_timestamp: "{{ set_git_timestamp | default('not specified') }}"
    app_build_number: "{{ set_app_build_number | default('not specified') }}"
    app_version: "{{ set_app_version | default('not specified') }}"

  roles:
    - role: docker
      tags: docker

  tasks:
    - name: Log into Docker Registry
      docker_login:
        registry_url: "{{ registry_url | default('***ARANGO_DB_NAME***.azurecr.io') }}"
        username: "{{ AZURE_CR_USERNAME }}"
        password: "{{ AZURE_CR_PASSWORD }}"
      tags:
        - deploy
        - docker

    - name: Copy docker-compose file
      copy:
        src: files/docker-compose.yml
        dest: "{{ deploy_dir }}"
      tags:
        - deploy
        - docker-compose
    - name: Create .env file
      copy:
        content: |
          GITHUB_COMMIT_TIMESTAMP={{ git_timestamp }}
          ELASTICSEARCH_HOSTS={{ ELASTICSEARCH_HOSTS }}
          ELASTIC_FILE_INDEX_ID={{ elastic_file_content_index_id }}
          POSTGRES_HOST={{ POSTGRES_HOST }}
          POSTGRES_PORT={{ POSTGRES_PORT }}
          POSTGRES_USER={{ POSTGRES_USER }}
          POSTGRES_PASSWORD={{ POSTGRES_PASSWORD }}
          POSTGRES_DB={{ POSTGRES_DB }}
          NEO4J_HOST={{ NEO4J_HOST }}
          NEO4J_AUTH={{ NEO4J_AUTH }}
          NEO4J_PORT="{{ NEO4J_PORT|quote }}"
          FLASK_APP={{ FLASK_APP }}
          FLASK_APP_CONFIG={{ FLASK_APP_CONFIG }}
          FLASK_ENV={{ FLASK_ENV }}
          PROJECT_ID={{ PROJECT_ID }}
          CLOUD_SQL_ALIAS={{ CLOUD_SQL_ALIAS }}
          GCE_BACKUP_BUCKET={{ GCE_BACKUP_BUCKET }}
          SENTRY_KEY={{ SENTRY_KEY }}
          REDIS_HOST={{ REDIS_HOST }}
          REDIS_PORT={{ REDIS_PORT }}
          REDIS_PASSWORD={{ REDIS_PASSWORD }}
          DOMAIN={{ DOMAIN }}
          GITHUB_HASH={{ docker_img_hash }}
          APP_VERSION={{ app_version }}
          APP_BUILD_NUMBER={{ app_build_number }}
          GOOGLE_APPLICATION_CREDENTIALS="ansible_service_account.json"
          LMDB_HOME_FOLDER={{ LMDB_HOME_FOLDER }}
          AZURE_ACCOUNT_STORAGE_NAME={{ AZURE_ACCOUNT_STORAGE_NAME }}
          AZURE_ACCOUNT_STORAGE_KEY={{ AZURE_ACCOUNT_STORAGE_KEY }}
          AZURE_CR_USERNAME={{ AZURE_CR_USERNAME }}
          AZURE_CR_PASSWORD={{ AZURE_CR_PASSWORD }}
          AZURE_BLOB_STORAGE_URL={{ AZURE_BLOB_STORAGE_URL }}
          LOG_LEVEL="{{ REDIS_LOG_LEVEL | default('warning') }}"
          FORMAT_AS_JSON="{{ FORMAT_AS_JSON | default('true') }}"
          MB_ELASTICSEARCH_HOSTS={{ MB_ELASTICSEARCH_HOSTS }}
          MB_ELASTICSEARCH_USERNAME={{ MB_ELASTICSEARCH_USERNAME }}
          MB_ELASTICSEARCH_PASSWORD={{ MB_ELASTICSEARCH_PASSWORD }}
          MB_KIBANA_HOST={{ MB_KIBANA_HOST }}
          SEND_GRID_EMAIL_API_KEY={{ SEND_GRID_EMAIL_API_KEY }}
          ELASTIC_APM_SERVER_URL={{ ELASTIC_APM_SERVER_URL }}
          ASSETS_FOLDER="/home/n4j/assets/"
        dest: "{{ deploy_dir }}/.env"
      tags:
        - deploy
        - docker-compose

    - name: Create and start services in Docker Compose file
      community.docker.docker_compose:
        project_src: "{{ deploy_dir }}"
      register: docker_compose_up_output
      tags:
        - deploy
        - docker-compose

    - name: Run the PostgreSQL migration
      community.docker.docker_container_exec:
        container: appserver
        command: bin/migrate-db --upgrade --data-migrate
      register: postgres_migration_output
      tags:
        - migration
        - postgres

    - name: Create/Update LMDB database
      community.docker.docker_container_exec:
        container: appserver
        command: flask load-lmdb
      register: load_lmdb_output
      tags:
        - lmdb

    - name: Run the graph database migration task
      docker_container:
        state: started
        image: ***ARANGO_DB_NAME***.azurecr.io/kg-liquibase:{{ liquibase_image_tag | default(docker_img_hash) }}
        name: kg-liquibase
        pull: yes
        restart_policy: on-failure
        env:
          NEO4J_HOST: "{{ NEO4J_HOST }}"
          NEO4J_USERNAME: "{{ NEO4J_AUTH | split('/')[0] }}"
          NEO4J_PASSWORD: "{{ NEO4J_AUTH | split('/')[1] }}"
          NEO4J_DATABASE: "{{ NEO4J_DATABASE | default('neo4j') }}"
          AZURE_ACCOUNT_NAME: "{{ AZURE_ACCOUNT_STORAGE_NAME }}"
          AZURE_ACCOUNT_KEY: "{{ AZURE_ACCOUNT_STORAGE_KEY }}"
        command: update
      tags:
        - migration
        - neo4j

    - name: Seed Elasticsearch
      community.docker.docker_container_exec:
        container: appserver
        command: flask reset-elastic
      register: reset_elastic_output
      tags:
        - elasticsearch

    - name: Seed Elasticsearch with Global Annotations
      include_role:
        name: global-annotation
        apply:
          tags:
            - always
      tags:
        - elasticsearch
        - annotation
