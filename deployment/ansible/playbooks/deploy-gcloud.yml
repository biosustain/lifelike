- hosts: "{{ webserver }}"
  become: true
  vars:
    docker_img_hash: "{{ set_docker_img_hash | default('latest') }}"
    git_timestamp: "{{ set_git_timestamp | default('not specified') }}"
    app_build_number: "{{ set_app_build_number | default('not specified') }}"
    app_version: "{{ set_app_version | default('not specified') }}"
  roles:
    - role: docker
      tags: ["docker"]

  tasks:
    - name: Install fail2ban
      apt:
        update_cache: yes
        pkg:
          - fail2ban

    - name: Log into Docker Registry
      docker_login:
        registry_url: ***ARANGO_DB_NAME***.azurecr.io
        username: "{{ AZURE_CR_USERNAME }}"
        password: "{{ AZURE_CR_PASSWORD }}"
      tags:
        - deploy

    - name: Pull Docker Images
      docker_image:
        name: "***ARANGO_DB_NAME***.azurecr.io/{{ item }}:{{ docker_img_hash }}"
        source: pull
      with_items:
        - kg-appserver
        - kg-webserver
        - kg-cache-service
      tags:
        - deploy

    - name: Pull PDFParser Docker Image
      docker_image:
        name: "***ARANGO_DB_NAME***.azurecr.io/{{ item }}:latest"
        source: pull
      with_items:
        - kg-pdfparser
      tags:
        - deploy

    - name: Copy docker-compose files
      copy:
        src: "./files/{{ item }}"
        dest: "{{ deploy_dir }}"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: u=rw,g=r,o=r
      with_items:
        - docker-compose.yml
      tags:
        - deploy

    - name: Create .env file
      copy:
        content: |
          NLP_SECRET={{ NLP_SECRET }}
          GITHUB_COMMIT_TIMESTAMP={{ git_timestamp }}
          ELASTICSEARCH_HOSTS={{ ELASTICSEARCH_HOSTS }}
          ELASTIC_FILE_INDEX_ID={{ elastic_file_content_index_id }}
          POSTGRES_HOST={{ POSTGRES_HOST }}
          POSTGRES_PORT={{ POSTGRES_PORT }}
          POSTGRES_USER={{ POSTGRES_USER }}
          POSTGRES_PASSWORD={{ POSTGRES_PASSWORD }}
          POSTGRES_DB={{ POSTGRES_DB }}
          NEO4J_HOST={{ NEO4J_HOST }}
          NEO4J_AUTH={{ NEO4J_AUTH }}
          NEO4J_PORT="{{ NEO4J_PORT|quote }}"
          FLASK_APP={{ FLASK_APP }}
          FLASK_APP_CONFIG={{ FLASK_APP_CONFIG }}
          FLASK_ENV={{ FLASK_ENV }}
          PROJECT_ID={{ PROJECT_ID }}
          CLOUD_SQL_ALIAS={{ CLOUD_SQL_ALIAS }}
          GCE_BACKUP_BUCKET={{ GCE_BACKUP_BUCKET }}
          SENTRY_KEY={{ SENTRY_KEY }}
          REDIS_HOST={{ REDIS_HOST }}
          REDIS_PORT={{ REDIS_PORT }}
          REDIS_PASSWORD={{ REDIS_PASSWORD }}
          DOMAIN={{ DOMAIN }}
          GITHUB_HASH={{ docker_img_hash }}
          APP_VERSION={{ app_version }}
          APP_BUILD_NUMBER={{ app_build_number }}
          GOOGLE_APPLICATION_CREDENTIALS="ansible_service_account.json"
          LMDB_HOME_FOLDER={{ LMDB_HOME_FOLDER }}
          AZURE_ACCOUNT_STORAGE_NAME={{ AZURE_ACCOUNT_STORAGE_NAME }}
          AZURE_ACCOUNT_STORAGE_KEY={{ AZURE_ACCOUNT_STORAGE_KEY }}
          AZURE_CR_USERNAME={{ AZURE_CR_USERNAME }}
          AZURE_CR_PASSWORD={{ AZURE_CR_PASSWORD }}
          AZURE_BLOB_STORAGE_URL={{ AZURE_BLOB_STORAGE_URL }}
          LOG_LEVEL="{{ REDIS_LOG_LEVEL | default('warning') }}"
          FORMAT_AS_JSON="{{ FORMAT_AS_JSON | default('true') }}"
          MB_ELASTICSEARCH_HOSTS={{ MB_ELASTICSEARCH_HOSTS }}
          MB_ELASTICSEARCH_USERNAME={{ MB_ELASTICSEARCH_USERNAME }}
          MB_ELASTICSEARCH_PASSWORD={{ MB_ELASTICSEARCH_PASSWORD }}
          MB_KIBANA_HOST={{ MB_KIBANA_HOST }}
          SEND_GRID_EMAIL_API_KEY= {{ SEND_GRID_EMAIL_API_KEY }}
          ASSETS_FOLDER="/home/n4j/assets/"
        dest: "{{ deploy_dir }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: u=rw,g=r,o=r
      tags:
        - deploy

    - name: Stop any previous containers
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: docker stop $(docker ps -aq)

    - name: Pull latest docker images (if any)
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose pull"
      tags:
        - deploy

    - name: Start docker
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose up -d"
      tags:
        - deploy

    - name: Prune unused images
      shell:
        "docker image prune -a -f"
      tags:
        - deploy

    - name: Run the migration
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose exec -T appserver bin/migrate-db --upgrade --data-migrate"
      tags:
        - deploy

    - name: Create LMDB directory
      file:
        path: "{{ deploy_dir }}/lmdb"
        state: directory
        mode: "774"
        owner: "{{ deploy_user }}"
        group: "1000" # We do this because of group permissions 1000 in Docker

    - name: Create/Update LMDB database
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose exec -d -T appserver flask load-lmdb"
      tags:
        - deploy

    - name: Seed Elasticsearch
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker-compose run -d -T appserver flask reset-elastic"

    - name: Seed Elasticsearch with Global Annotations
      include_role:
        name: global-annotation
        apply:
          tags:
            - always
      tags:
        - annotation
        - deploy
