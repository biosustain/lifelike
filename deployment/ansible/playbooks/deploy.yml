- hosts: "{{ webserver }}"
  become: true
  vars:
    docker_img_hash: "{{ set_docker_img_hash | default('latest') }}"
    git_timestamp: "{{ set_git_timestamp | default('not specified') }}"
    app_build_number: "{{ set_app_build_number | default('not specified') }}"
    app_version: "{{ set_app_version | default('not specified') }}"
    cloud_backup: "{{ set_cloud_backup | default(false) }}"
  roles:
    - role: docker
      tags: ["docker"]
    - role: gcloud-auth
      tags: ["gcloud-auth"]

  tasks:
    - name: Allow Docker to access Google Cloud Registry
      shell: gcloud --quiet auth configure-docker

    - name: Create Docker Network - Backend
      docker_network:
        name: backend

    - name: Create Docker Network - Frontend
      docker_network:
        name: frontend

    - name: Appserver Container Deployment
      docker_container:
        name: appserver
        state: started
        image: "{{ container_registry }}/kg-appserver:{{ docker_img_hash }}"
        ports:
          - "5000:5000"
        env:
          GITHUB_COMMIT_TIMESTAMP: "{{ git_timestamp }}"
          ELASTICSEARCH_HOSTS: "{{ ELASTICSEARCH_HOSTS }}"
          ELASTIC_FILE_INDEX_ID: "{{ elastic_file_content_index_id }}"
          POSTGRES_HOST: "{{ POSTGRES_HOST }}"
          POSTGRES_PORT: "{{ POSTGRES_PORT|quote }}"
          POSTGRES_USER: "{{ POSTGRES_USER }}"
          POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
          POSTGRES_DB: "{{ POSTGRES_DB }}"
          NEO4J_HOST: "{{ NEO4J_HOST }}"
          NEO4J_AUTH: "{{ NEO4J_AUTH }}"
          FLASK_APP: "{{ FLASK_APP }}"
          FLASK_APP_CONFIG: "{{ FLASK_APP_CONFIG }}"
          FLASK_ENV: "{{ FLASK_ENV }}"
          PROJECT_ID: "{{ PROJECT_ID }}"
          CLOUD_SQL_ALIAS: "{{ CLOUD_SQL_ALIAS }}"
          GCE_BACKUP_BUCKET: "{{ GCE_BACKUP_BUCKET }}"
          SENTRY_KEY: "{{ SENTRY_KEY }}"
          REDIS_HOST: "{{ REDIS_HOST }}"
          REDIS_PORT: "{{ REDIS_PORT|quote }}"
          DOMAIN: "{{ DOMAIN }}"
          GITHUB_HASH: "{{ docker_img_hash }}"
          APP_VERSION: "{{ app_version }}"
          APP_BUILD_NUMBER: "{{ app_build_number|quote }}"
          GOOGLE_APPLICATION_CREDENTIALS: "ansible_service_account.json"
          LMDB_HOME_FOLDER: "{{ LMDB_HOME_FOLDER }}"
        comparisons:
          image: strict
          env: strict
        cpus: 4
        memory: 10G
        volumes:
          - /home/ansible/ansible_service_account.json:/home/n4j/ansible_service_account.json
          - /home/ansible/lmdb:/home/n4j/neo4japp/services/annotations/lmdb
        networks:
          - name: backend
            aliases:
              - appserver
          - name: frontend
            aliases:
              - appserver
      tags:
        - delpoy

    - name: Webserver Container Deployment
      docker_container:
        name: webserver
        state: started
        image: "{{ container_registry }}/kg-webserver:{{ docker_img_hash }}"
        cpus: 4
        memory: 2G
        comparisons:
          image: strict
          env: strict
        ports:
          - "80:80"
          - "443:443"
        networks:
          - name: frontend
            aliases:
              - webserver

    - name: Prune unused images
      shell: "docker image prune -a -f"
      tags:
        - deploy

    - name: Redis Container Deployment
      docker_container:
        name: redis
        state: started
        image: redis:alpine
        networks:
          - name: backend
            aliases:
              - redis

    - name: Run database migrations and backups
      block:
        - name: Fetch cloud_sql_service_account
          shell: "gcloud sql instances describe --format='value(serviceAccountEmailAddress)' {{ CLOUD_SQL_ALIAS }}"
          register: cloud_sql_bucket_account

        - name: Grant access to Google Cloud Bucket Storage
          shell: "gsutil acl ch -u {{ cloud_sql_bucket_account.stdout }}:W gs://{{ GCE_BACKUP_BUCKET }}"

        - name: Generate backup ID
          shell: "echo {{ CLOUD_SQL_ALIAS }}_$(date +%Y%m%d_%H-%M-%S).sqldump.gz"
          register: BACKUP_ID

        - name: Generate backup
          shell: "gcloud sql export sql {{ CLOUD_SQL_ALIAS }} gs://{{ GCE_BACKUP_BUCKET }}/{{ BACKUP_ID.stdout }} --database={{ POSTGRES_DB }}"
      when: cloud_backup|bool
      tags:
        - deploy

    - name: Run the migration
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker exec appserver bin/migrate-db --upgrade --data-migrate"
      tags:
        - deploy

    - name: Create/Update LMDB database
      file:
        path: "{{ deploy_dir }}/lmdb"
        state: directory
        mode: "775"
        owner: "{{ deploy_user }}"
        group: "1000" # We do this because group permissions 1000 in Docker files

    - name: Seed Elasticsearch with Global Annotations
      include_role:
        name: global-annotation
        apply:
          tags:
            - always
      tags:
        - annotation
        - deploy

    - name: Warm up LMDB
      shell:
        chdir: "{{ deploy_dir }}"
        cmd: "docker exec appserver python3 neo4japp/services/annotations/warm_up/lmdb_warmup.py"
      tags:
        - deploy
