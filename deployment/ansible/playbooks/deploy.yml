- include: cronjobs.yml
- hosts: "{{ webserver }}"
  become: true
  vars:
    docker_img_hash: "{{ set_docker_img_hash | default('latest') }}"
    git_timestamp: "{{ set_git_timestamp | default('not specified') }}"
    app_build_number: "{{ set_app_build_number | default('not specified') }}"
    app_version: "{{ set_app_version | default('not specified') }}"
    cloud_backup: "{{ set_cloud_backup | default(false) }}"
  roles:
    - role: docker
      tags: ["docker"]

  tasks:
    - name: Create Docker Networks
      docker_network:
        name: "{{ item }}"
      with_items:
        - backend
        - frontend

    - name: Log into Docker Registry
      docker_login:
        registry_url: lifelike.azurecr.io
        username: "{{ AZURE_CR_USERNAME }}"
        password: "{{ AZURE_CR_PASSWORD }}"

    - name: Create/Update LMDB Database
      file:
        path: "{{ deploy_dir }}/lmdb"
        state: directory
        mode: "775"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"

    - name: Appserver Container Deployment
      docker_container:
        name: appserver
        state: started
        pull: yes
        restart: yes
        restart_policy: on-failure
        restart_retries: 3
        image: "{{ container_registry }}/kg-appserver:{{ docker_img_hash }}"
        ports:
          - "5000:5000"
        env:
          GITHUB_COMMIT_TIMESTAMP: "{{ git_timestamp }}"
          ELASTICSEARCH_HOSTS: "{{ ELASTICSEARCH_HOSTS }}"
          ELASTIC_FILE_INDEX_ID: "{{ elastic_file_content_index_id }}"
          POSTGRES_HOST: "{{ POSTGRES_HOST }}"
          POSTGRES_PORT: "{{ POSTGRES_PORT|quote }}"
          POSTGRES_USER: "{{ POSTGRES_USER }}"
          POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
          POSTGRES_DB: "{{ POSTGRES_DB }}"
          NEO4J_HOST: "{{ NEO4J_HOST }}"
          NEO4J_AUTH: "{{ NEO4J_AUTH }}"
          NEO4J_SCHEME: "{{ NEO4J_SCHEME }}"
          NEO4J_PORT: "{{ NEO4J_PORT|quote }}"
          NEO4J_DATABASE: "{{ NEO4J_DATABASE }}"
          FLASK_APP: "{{ FLASK_APP }}"
          FLASK_APP_CONFIG: "{{ FLASK_APP_CONFIG }}"
          FLASK_ENV: "{{ FLASK_ENV }}"
          SENTRY_KEY: "{{ SENTRY_KEY }}"
          REDIS_HOST: "{{ REDIS_HOST }}"
          REDIS_PORT: "{{ REDIS_PORT|quote }}"
          REDIS_PASSWORD: "{{ REDIS_PASSWORD }}"
          REDIS_SSL: "{{ REDIS_SSL }}"
          DOMAIN: "{{ DOMAIN }}"
          GITHUB_HASH: "{{ docker_img_hash }}"
          APP_VERSION: "{{ app_version }}"
          APP_BUILD_NUMBER: "{{ app_build_number|quote }}"
          LMDB_HOME_FOLDER: "{{ LMDB_HOME_FOLDER }}"
          SECRET_KEY: "{{ SECRET_KEY }}"
          AZURE_ACCOUNT_STORAGE_NAME: "{{ AZURE_ACCOUNT_STORAGE_NAME }}"
          AZURE_ACCOUNT_STORAGE_KEY: "{{ AZURE_ACCOUNT_STORAGE_KEY }}"
          AZURE_BLOB_STORAGE_URL: "{{ AZURE_BLOB_STORAGE_URL }}"
        comparisons:
          image: strict
          env: strict
        memory: 10G
        volumes:
          - "{{ deploy_dir }}/lmdb:/home/n4j/neo4japp/services/annotations/lmdb"
        networks:
          - name: backend
            aliases:
              - appserver
          - name: frontend
            aliases:
              - appserver
      tags:
        - deploy

    - name: Webserver Container Deployment
      docker_container:
        name: webserver
        state: started
        pull: yes
        restart: yes
        restart_policy: on-failure
        restart_retries: 3
        image: "{{ container_registry }}/kg-webserver:{{ docker_img_hash }}"
        memory: 2G
        comparisons:
          image: strict
          env: strict
        ports:
          - "80:80"
          - "443:443"
        networks:
          - name: frontend
            aliases:
              - webserver
      tags:
        - deploy

    - name: PDFParser Container Deployment
      docker_container:
        name: pdfparser
        tty: yes
        state: started
        pull: yes
        restart: yes
        restart_policy: on-failure
        restart_retries: 3
        image: "{{ container_registry }}/kg-pdfparser:latest"
        memory: 1G
        ports:
          - "7600:7600"
        networks:
          - name: backend
            aliases:
              - pdfparser
      tags:
        - deploy

    - name: Filebeat Deployment
      docker_container:
        hostname: "filebeat-{{ webserver }}"
        name: filebeat
        state: started
        pull: yes
        restart: yes
        restart_policy: on-failure
        restart_retries: 3
        image: "{{ container_registry }}/filebeat:{{ docker_img_hash }}"
        command: "--strict.perms=false"
        user: root
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          # This is needed for filebeat to load container log path as specified in filebeat.yml
          - /var/lib/docker/containers:/var/lib/docker/containers:ro
        memory: 1G
        comparisons:
          image: strict
          env: strict
        networks:
          - name: backend
            aliases:
              - filebeat
          - name: frontend
            aliases:
              - filebeat

    # Use a dev version within the same VM if not prod/staging
    - name: Redis Deployment (Non Production/Staging)
      docker_container:
        name: redis
        state: started
        pull: yes
        restart: yes
        restart_policy: on-failure
        restart_retries: 3
        image: redis:alpine
        command: redis-server --requirepass "{{ REDIS_PASSWORD }}"
        memory: 2G
        comparisons:
          image: strict
          env: strict
        networks:
          - name: backend
            aliases:
              - redis
        when: "{{ webserver }}" == "prod" or "{{ webserver }}" == "staging"

    - name: Prune unused images
      shell: "docker image prune -a -f"
      tags:
        - deploy

    - name: Run database migration
      shell:
        cmd: docker exec appserver bin/migrate-db --upgrade --data-migrate

    - name: Load lmdb database
      shell:
        cmd: docker exec appserver flask load-lmdb

    - name: Seed elastic
      shell:
        cmd: docker exec -d appserver flask seed-elastic

    - name: Seed Elasticsearch with Global Annotations
      include_role:
        name: global-annotation
        apply:
          tags:
            - always
      tags:
        - annotation
        - deploy
