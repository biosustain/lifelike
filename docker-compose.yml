version: "3.9"

x-appserver: &appserver
  build: ./appserver
  environment:
    # Log Services
    - FORMAT_AS_JSON=false
    # Flask
    - FLASK_APP=app
    - FLASK_APP_CONFIG=Development
    - FLASK_DEBUG=1
    - FLASK_ENV=development
    # Postgres
    - POSTGRES_HOST=pgdatabase
    - POSTGRES_PORT=5432
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DB=postgres
    # ElasticSearch
    - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    - ELASTIC_FILE_INDEX_ID=file_dev
    # Neo4j
    - NEO4J_SCHEME=bolt
    - NEO4J_HOST=graphdatabase
    - NEO4J_AUTH=neo4j/password
    - NEO4J_PORT=7687
    # Redis
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_PASSWORD=password
    - REDIS_SSL=false
    # StatisticalEnrichment
    - SE_HOST=statistical-enrichment
    - SE_PORT=5010
    # Other
    - DOMAIN=http://localhost:4200
    - LMDB_HOME_FOLDER=/home/n4j/neo4japp/services/annotations/lmdb/
    - ASSETS_FOLDER=/home/n4j/assets/
  volumes:
    - ./appserver:/home/n4j
    - lmdb:/home/n4j/neo4japp/services/annotations/lmdb
  depends_on:
    postgres:
      condition: service_healthy
    neo4j:
      condition: service_healthy
    elasticsearch:
      condition: service_healthy
    redis:
      condition: service_healthy
    pdfparser:
      condition: service_started

services:
  webserver:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: angular-deps
    command: yarn dev-start
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - 4200:4200
  appserver:
    <<: *appserver
    ports:
      - 5000:5000

  worker:
    <<: *appserver
    command: flask rq worker

  statistical-enrichment:
    build: ./statistical-enrichment
    environment:
      # Flask
      - FLASK_APP=statistical_enrichment
      - FLASK_APP_CONFIG=Development
      - FLASK_DEBUG=1
      - FLASK_ENV=development
      # Neo4j
      - NEO4J_SCHEME=bolt
      - NEO4J_HOST=graphdatabase
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PORT=7687
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
      - REDIS_SSL=false
    volumes:
      - ./statistical-enrichment:/home/user
    ports:
      - 5010:5010
    depends_on:
      - neo4j
      - redis

  cache-invalidator:
    build: ./cache-invalidator
    environment:
      - LOG_LEVEL=debug
      # Neo4j
      - NEO4J_SCHEME=bolt
      - NEO4J_HOST=graphdatabase
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PORT=7687
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
      - REDIS_SSL=false
    volumes:
      - ./cache-invalidator:/app
    depends_on:
      - neo4j
      - redis

  pdfparser:
    image: ghcr.io/sbrg/***ARANGO_DB_NAME***-pdfparser:latest
    ports:
      - 7600:7600
    # tty: true - this is a hack for grizzly as it expects input;
    # without it, container will exit right away due to docker not accepting input by default
    tty: true

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      start_period: 5s
      timeout: 1s
      interval: 3s
      retries: 5

  neo4j:
    image: neo4j:4.4-community
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4JLABS_PLUGINS=["apoc", "n10s"]
    volumes:
      - neo4j:/var/lib/neo4j/data
    ports:
      - 7474:7474
      - 7687:7687
    healthcheck:
      test: ["CMD-SHELL", "/var/lib/neo4j/bin/neo4j status"]
      start_period: 60s
      timeout: 3s
      interval: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    environment:
      - REDIS_PASSWORD=password
    volumes:
      - redis:/data

  elasticsearch:
    build:
      dockerfile: Dockerfile
      context: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1

volumes:
  postgres:
  neo4j:
  elasticsearch:
  lmdb:
  redis:
