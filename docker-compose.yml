version: "3.9"
name: "***ARANGO_DB_NAME***"
# This is core configuration on how to run ***ARANGO_DB_NAME*** ussing docker compose

x-snappy-healthcheck: &snappy-healthcheck # 3s + 18*5s ~= 1.5min (timeout)
  interval: 5s
  start_period: 3s
  retries: 18

x-slow-start-healthcheck: &slow-start-healthcheck # 60s + 24*10s = 5min (timeout)
  interval: 10s # Particurlalry slow start
  start_period: 60s
  retries: 24

#region Services

# Postgres
x-postgres: &postgres
  POSTGRES_HOST: pgdatabase
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: postgres

# Neo4j
x-neo4j: &neo4j
  NEO4J_SCHEME: bolt
  NEO4J_HOST: graphdatabase
  NEO4J_AUTH: neo4j/password
  NEO4J_PORT: 7687

# Arango
x-arango: &arango
  ARANGO_HOST: http://arangodb:8529
  ARANGO_USERNAME: ***ARANGO_USERNAME***
  ARANGO_PASSWORD: password
  ARANGO_DB_NAME: ***ARANGO_DB_NAME***

# Redis
x-redis: &redis
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_USERNAME: default
  REDIS_PASSWORD: password
  REDIS_SSL: false

# ElasticSearch
x-elasticsearch: &elasticsearch
  ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  ELASTIC_FILE_INDEX_ID: file_dev

# StatisticalEnrichment
x-statisticalenrichment: &statisticalenrichment
  SE_HOST: statistical-enrichment
  SE_PORT: 5010

#endregion

x-appserver: &appserver
  extends:
    file: docker-compose.prod.yml
    service: appserver
  build: ./appserver
  environment:
    # Log Services
    FORMAT_AS_JSON: false
    # Flask
    FLASK_APP: app
    FLASK_APP_CONFIG: Development
    FLASK_DEBUG: 1
    FLASK_ENV: development
    # Services
    <<: [*postgres, *elasticsearch, *neo4j, *arango, *redis, *statisticalenrichment]
    # Other
    DOMAIN: http://localhost:4200
    LMDB_HOME_FOLDER: /home/n4j/neo4japp/services/annotations/lmdb/
    ASSETS_FOLDER: /home/n4j/assets/
  depends_on:
    pgdatabase:
      condition: service_healthy
    elasticsearch:
      condition: service_healthy
    graphdatabase:
      condition: service_healthy
    redis:
      condition: service_healthy
    pdfparser:
      condition: service_healthy
    arangodb:
      condition: service_healthy

services:
  migrate:
    extends:
      file: docker-compose.prod.yml
      service: migrate
    build: ./migrations
    environment:
      <<: [*postgres]
    depends_on:
      pgdatabase:
        condition: service_healthy
    networks:
      - backend

  appserver:
    <<: *appserver
    healthcheck:
      test: curl -f http://localhost:5000/meta/ || exit 1
      <<: *snappy-healthcheck
    depends_on:
      worker:
        condition: service_started
    networks:
      - backend
      - frontend

  worker:
    <<: *appserver
    command: rq worker -c rq_config --with-scheduler
    healthcheck:
      test: rq info
      <<: *snappy-healthcheck
    networks:
      - backend

  webserver:
    extends:
      file: docker-compose.prod.yml
      service: webserver
    build:
      context: ./client
      dockerfile: Dockerfile
      target: angular-deps
    command: yarn dev-start
    networks:
      - frontend
    healthcheck:
      test: curl -f http://localhost:4200 || exit 1
    depends_on:
      appserver:
        condition: service_started

  statistical-enrichment:
    extends:
      file: docker-compose.prod.yml
      service: statistical-enrichment
    build: ./statistical-enrichment
    environment:
      # Flask
      FLASK_APP: statistical_enrichment
      FLASK_APP_CONFIG: Development
      FLASK_DEBUG: 1
      FLASK_ENV: development
      # Services
      <<: [*neo4j, *redis]
    networks:
      - backend
    healthcheck:
      test: curl -f http://localhost:5010/healthz || exit 1
      <<: *snappy-healthcheck
    depends_on:
      graphdatabase:
        condition: service_healthy
      redis:
        condition: service_healthy

  cache-invalidator:
    extends:
      file: docker-compose.prod.yml
      service: cache-invalidator
    build: ./cache-invalidator
    environment:
      LOG_LEVEL: debug
      # Services
      <<: [*neo4j, *redis]
    networks:
      - backend
    depends_on:
      redis:
        condition: service_healthy
      graphdatabase:
        condition: service_healthy

  pdfparser:
    extends:
      file: docker-compose.prod.yml
      service: pdfparser
    healthcheck:
      test: curl -f http://localhost:7600 || exit 1
      <<: *snappy-healthcheck
    # tty: true - this is a hack for grizzly as it expects input;
    # without it, container will exit right away due to docker not accepting input by default
    tty: true
    networks:
      - backend

  pgdatabase:
    image: postgres:11
    user: postgres
    command: postgres -c max_wal_size=2GB -c log_statement='all'
    environment:
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: pg_isready
      <<: *snappy-healthcheck
    networks:
      - backend

  graphdatabase:
    image: neo4j:4.4.19-community
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4JLABS_PLUGINS: '["apoc", "n10s"]'
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1
      <<: *slow-start-healthcheck
    networks:
      - backend

  arangodb:
    build:
      # Note that this Dockerfile simply adds a user directory and installs the helper scripts into it, and then executes the default arango
      # entrypoint as normal.
      context: ./arangodb
      dockerfile: Dockerfile
    environment:
      ARANGO_ROOT_PASSWORD: password
      LIFELIKE_DB_NAME: ***ARANGO_DB_NAME***
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8529 || exit 1
      <<: *snappy-healthcheck
    networks:
      - backend

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass password
    healthcheck:
      test: redis-cli --raw incr ping
      <<: *snappy-healthcheck
    networks:
      - backend

  elasticsearch:
    build:
      dockerfile: Dockerfile
      context: elasticsearch
    restart: on-failure:3
    environment:
      discovery.type: single-node
      http.max_content_length: 200mb #allow 200mb of content to be sent for indexing
      bootstrap.memory_lock: true
      xpack.graph.enabled: false
      xpack.watcher.enabled: false
      xpack.license.self_generated.type: basic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -f http://localhost:9200 || exit 1
      <<: *slow-start-healthcheck
    networks:
      - backend
      - elastic

  #  Middlewares
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.1
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - elastic
    healthcheck:
      test: curl -f http://localhost:5601 || exit 1
      <<: *slow-start-healthcheck
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    build:
      dockerfile: Dockerfile
      context: logstash
    networks:
      - elastic
    healthcheck:
      test: curl -f -XGET 'http://localhost:9600/?pretty' || exit 1
      <<: *slow-start-healthcheck
    depends_on:
      elasticsearch:
        condition: service_healthy

  metricbeat:
    user: ***ARANGO_USERNAME***
    environment:
      MB_ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      MB_ELASTICSEARCH_USERNAME: elastic
      MB_ELASTICSEARCH_PASSWORD: changeme
      MB_KIBANA_HOST: http://kibana:5601
    build:
      context: metricbeat/
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    healthcheck:
      test: metricbeat test output
      <<: *snappy-healthcheck
    networks:
      - elastic

  filebeat:
    user: ***ARANGO_USERNAME***
    extends:
      file: docker-compose.prod.yml
      service: filebeat
    build:
      context: filebeat/
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # This is needed for filebeat to load container log path as specified in filebeat.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      ELASTICSEARCH_HOST: "http://elasticsearch:9200"
      KIBANA_HOST: "http://kibana:5601"
      ELASTICSEARCH_USERNAME: "elastic"
      ELASTICSEARCH_PASSWORD: "changeme"
    command: ["--strict.perms=false"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
      kibana:
        condition: service_healthy
    healthcheck:
      test: ps aux | grep '[f]ilebeat' || exit 1
      <<: *snappy-healthcheck
    networks:
      - frontend
      - backend
      - elastic

volumes:
  node_modules:
  lmdb:

networks:
  frontend:
  backend:
  elastic:
