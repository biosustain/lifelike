version: "3.9"

# ----------------------------------------
# Appserver template anchor
# ----------------------------------------
x-appserver: &appserver
  build: ./appserver
  restart: unless-stopped
  environment:
    # Flask
    - FLASK_ENV=development
    - FLASK_APP_CONFIG=Development

    # Postgres
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DB=postgres

    # Arango
    - ARANGO_HOST=http://arangodb:8529
    - ARANGO_USERNAME=***ARANGO_USERNAME***
    - ARANGO_PASSWORD=password
    - ARANGO_DB_NAME=***ARANGO_DB_NAME***

    # Redis
    - REDIS_HOST=redis
    - REDIS_PORT=6379
    - REDIS_USERNAME=default
    - REDIS_PASSWORD=password
    - REDIS_SSL=false

    # Statistical Enrichment
    - SE_HOST=statistical-enrichment
    - SE_PORT=5010

    # PDF Parser
    - PDFPARSER_URL=http://pdfparser:7600

    # ElasticSearch
    - ELASTICSEARCH_HOSTS=http://elasticsearch:9200

services:
  # ----------------------------------------
  # Internal services
  # ----------------------------------------
  appserver:
    <<: *appserver
    profiles: [app]
    ports:
      - 5000:5000

  worker:
    <<: *appserver
    profiles: [app]
    command: rq worker -c rq_config --with-scheduler

  webserver:
    build: ./client
    restart: unless-stopped
    profiles: [app]
    ports:
      - 8080:80
      - 4200:4200

  statistical-enrichment:
    build: ./statistical-enrichment
    restart: unless-stopped
    profiles: [app]
    ports:
      - 5010:5010
    environment:
      # Flask
      - FLASK_APP_CONFIG=Development
      - FLASK_DEBUG=1
      - FLASK_ENV=development

      # Arango
      - ARANGO_HOST=http://arangodb:8529
      - ARANGO_USERNAME=***ARANGO_USERNAME***
      - ARANGO_PASSWORD=password
      - ARANGO_DB_NAME=***ARANGO_DB_NAME***

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USERNAME=default
      - REDIS_PASSWORD=password
      - REDIS_SSL=false

  cache-invalidator:
    build: ./cache-invalidator
    restart: unless-stopped
    profiles: [app]
    environment:
      # Flask
      - LOG_LEVEL=debug

      # Arango
      - ARANGO_HOST=http://arangodb:8529
      - ARANGO_USERNAME=***ARANGO_USERNAME***
      - ARANGO_PASSWORD=password
      - ARANGO_DB_NAME=***ARANGO_DB_NAME***

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USERNAME=default
      - REDIS_PASSWORD=password
      - REDIS_SSL=false

  pdfparser:
    image: ghcr.io/sbrg/***ARANGO_DB_NAME***-pdfparser
    restart: unless-stopped
    profiles: [services]
    tty: true
    ports:
      - 7600:7600

  postgres:
    image: postgres:14
    restart: unless-stopped
    profiles: [services]
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=postgres

  arangodb:
    build:
      # Note that this Dockerfile simply adds a user directory and installs the helper scripts into it, and then executes the default arango
      # entrypoint as normal.
      context: ./arangodb
      dockerfile: Dockerfile
    profiles: [services]
    environment:
      ARANGO_ROOT_PASSWORD: password
      LIFELIKE_DB_NAME: ***ARANGO_DB_NAME***
    ports:
      - 8529:8529
    volumes:
      - ./arangodb/bin:/home/dbuser/bin  # the /home/dbuser directory is setup in the Dockerfile
      - ./arangodb/data:/var/lib/arangodb3
      - ./arangodb/apps:/var/lib/arangodb3-apps

  elasticsearch:
    image: ghcr.io/sbrg/***ARANGO_DB_NAME***-elasticsearch
    profiles: [services]
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - http.max_content_length=200mb
    ports:
      - 9200:9200

  redis:
    image: redis:7-alpine
    profiles: [services]
    ports:
      - 6379:6379
