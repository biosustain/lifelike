set_gene_link:
  type: db-link
  description: link genes to NCBI gene
  query: |
    MATCH (n:Gene:db_BioCyc)
    WHERE size(n.accession) > 0
    WITH n
      MATCH (g:Gene)
      WHERE g.locus_tag = n.accession
      MERGE (n)-[:IS]->(g);

set_displayName:
  type: post-modification
  description: set biocyc node display name
  query: |
    MATCH (n:db_BioCyc)
    SET n.displayName = n.name;

    MATCH (n)
    WHERE (not exists (n.displayName)) or n.displayName = ''
    SET n.displayName = n.biocyc_id;

    MATCH (n:Regulation:db_BioCyc)-[:TYPE_OF]-(t:db_BioCyc)
    WITH
      n,
      CASE
          WHEN n.mode='+' then t.eid + ' (+)'
          WHEN n.mode='-' then t.eid + ' (-)'
          ELSE t.eid
      END as displayName
        SET n.displayName = displayName;
      MATCH (n:TranscriptionUnit:db_BioCyc)-[:ELEMENT_OF]-(g:Gene)
      WITH n, collect(g.name) as genes
        WITH
          n,
          CASE
              WHEN exists (n.name) then n.name + ' (tu)'
              ELSE apoc.text.join(apoc.coll.sort(genes), '-') + ' (tu)'
          END as displayName
            SET n.displayName = displayName;

set_node_description:
  type: post-modification
  description: set node description
  query: |
    MATCH (n:Gene:db_BioCyc)-[:IS]-(g:Gene:db_NCBI)
    SET n.description = g.full_name;

    MATCH (n:Gene:db_BioCyc)
    WHERE not exists(n.description) or n.description = '-'
    WITH n
      MATCH (n)-[:ENCODES]-(p)
      SET n.description = p.name;

    MATCH (n:TranscriptionUnit:db_BioCyc)-[:ELEMENT_OF]-(g:Gene)
    WITH n, collect(g.description) as descs
      SET n.description = 'TranscriptionUnit for ' + apoc.text.join(descs, ' and ');

    MATCH (n:Promoter:db_BioCyc)-[:ELEMENT_OF]->(tu)-[:ELEMENT_OF]-(g:Gene)
    WITH n, collect(g.description) as details
      SET n.description = 'Promoter for ' + apoc.text.join(details, ' and ');

    MATCH (n:Protein:db_BioCyc)-[:ENCODES]-(g:Gene)
    WHERE not exists(n.name)
    SET n.name = g.description;

    MATCH (p:db_BioCyc)-[:COMPONENT_OF]->(n:Protein)
    WHERE not exists(n.name)
    WITH n, collect(p.name) as comps
      SET n.name = 'complex of ' + apoc.text.join(comps, ', ');

    MATCH (p:db_BioCyc)-[:COMPONENT_OF]->(n:Protein:db_BioCyc)
    WITH n, collect(p.displayName) as comps
      SET n.description = 'complex of ' + apoc.text.join(comps, ' and ');

    MATCH (n:Reaction:db_BioCyc)
    WITH n
      MATCH (x)-[:CONSUMED_BY]-(n)-[:PRODUCES]-(y)
      WITH
        n,
        collect(distinct x.displayName) as c1,
        collect(distinct y.displayName) as c2,
        CASE
          WHEN n.direction = 'REVERSIBLE' then ' <=> '
          WHEN n.direction contains 'RIGHT-TO-LEFT' then ' <= '
          ELSE ' => '
        END as symbol
          SET n.detail = apoc.text.join(c1, ' + ') + symbol + apoc.text.join(c2, ' + ');

set_reaction_enzyme_name:
  type: post-modification
  description: set reaction enzyme_name property based on its connection with Enzyme
  query: |
    MATCH (n:Reaction)-[:ENZYME_LINK]-(e)
    WITH n, collect(e.name) as enzyme_name
      SET n.enzyme_name = enzyme_name;

set_gene_pathways:
  type: enrichment
  description: set pathways related to a gene.
  template: True
  query: |
    MATCH (n:${db_name}:Gene)
    WITH n
      MATCH path=(n)-[:ENCODES]-()-[:COMPONENT_OF*0..]->()-[]-(:EnzReaction)--(:Reaction)--(p:Pathway:${db_name})
      WITH n, collect(p.name) as pathways
        SET n.pathways = pathways

set_entity_type:
  type: post-modification
  description: set entity type for common entities since a node could have many labels
  query: |
    MATCH (n:Gene:db_BioCyc)
    SET n.entityType='Gene';

    MATCH (n:Compound)
    SET n.entityType='Chemical';

    MATCH (n:Protein:db_BioCyc)
    SET n.entityType='Protein';

    MATCH (n:Reaction)
    SET n.entityType='Reaction';

    MATCH (n:Pathway)
    SET n.entityType='Pathway';

    MATCH (n:RNA)
    SET n.entityType='RNA';

    MATCH (n:Promoter)
    SET n.entityType='Promoter';

    MATCH (n:TranscriptionUnit)
    SET n.entityType='TranscriptionUnit';

    MATCH (n:Terminator)
    SET n.entityType = 'Terminator';

set reaction_display_name:
  type: GDS
  description: set displayName as the first enzyme name in the enzyme_name property
  query: |
    MATCH (n:Reaction)
    SET n.displayName = '';

    MATCH (n:Reaction)
    WHERE exists(n.name)
    SET n.displayName = n.name;

    MATCH (n:Reaction)
    WHERE exists(n.enzyme_name) and n.displayName = ''
    SET n.displayName = n.enzyme_name[0];

    MATCH (e:EnzReaction)-[:CATALYZES]->(n:Reaction)
    WHERE n.displayName='' and exists (e.name)
    SET n.displayName = e.name;

    MATCH (n:Reaction)
    WHERE n.displayName <> ''
    SET n.displayName = n.displayName + '-RXN';

    MATCH (n:Reaction)
    WHERE n.displayName=''
    SET n.displayName = n.eid;


limit_cofactors_to_only_metals:
  type: GDS collapse
  description: limit cofactors to only metals
  query: |
    MATCH ()-[r:HAS_COFACTOR]->(c)
    WHERE NOT c.eid IN ["3FE-4S","ADENOSYLCOBALAMIN","CA+2","CO+2","COB-I-ALAMIN","CPD0-1882","CPD-15873","CPD-17649","CPD-23429","CPD-23430","CPD-24862","CPD-5","CPD-6","CPD-7","CPD-8123","CU+","CU+2","FE+2","FE+3","FeS-Centers","HEME_C","HEME_D","HEME_O","Heme-b","Hemes","K+","MG+2","MN+2","Mo-molybdopterin-cofactor","NI+2","PROTOHEME","SIROHEME","ZN+2"]
    DELETE r;


move_cofactor_relationship:
  type: GDS collapse
  description: move cofactor relationship from EnzReaction to Protein
  query: |
    match (n:Regulation)-[r:REGULATES]->(e:EnzReaction)-[:CATALYZES]->(rxn:Reaction)
    match ()-[:ENCODES]->(protein)-[:COMPONENT_OF*0..]->()-[:CATALYZES]->(e)-[hcof:HAS_COFACTOR]->(cof)
    merge (cof)-[:IS_COFACTOR_OF]->(protein)
    delete hcof;


collapse_EnzReaction_nodes:
  type: GDS collapse
  description: remove EnzReaction nodes, connect protein directly to reaction with CATALYZES relationship. For GDS
  query: |
    match (n:Regulation)-[r:REGULATES]->(e:EnzReaction)-[:CATALYZES]->(rxn:Reaction)
        merge (n)-[:REGULATES]->(rxn) set n.enzreaction_id=e.eid delete r;
        match(n:Protein)-[:CATALYZES]->(e:EnzReaction)-[:CATALYZES]->(r)
        merge (n)-[cat:CATALYZES]->(r) set cat.enzreaction_id = e.eid
        with distinct e as enz detach delete enz;
#    MATCH (n:Regulation)-[r:REGULATES]->(e:EnzReaction)-[:CATALYZES]->(rxn:Reaction)
#    DELETE r
#    MERGE (n)-[rr:REGULATES]->(rxn)
#    ON CREATE SET rr = properties(r)
#    SET n.enzreaction_id=e.eid;
#
#    MATCH (n:Protein)-[:CATALYZES]->(e:EnzReaction)-[cat:CATALYZES]->(r)
#    CALL apoc.create.relationship(
#      n,
#      'CATALYZES',
#      apoc.map.setEntry(
#        properties(cat),
#        'enzreaction_id',
#        e.eid
#      ),
#      r
#    ) YIELD rel
#    WITH distinct e as enz DETACH DELETE enz;

collapse_Regulation_nodes:
  type: GDS
  description: remove Regulation nodes. Connect regulator directly with regulated elements
  query: |
    MATCH (x)-[:REGULATES]->(r:Regulation)-[:REGULATES]->(y)
    WHERE r.mode='+' and exists(r.enzreaction_id)
    WITH x, y, collect(r.eid) as regIds, collect(r.enzreaction_id) as enzs
      MERGE (x)-[rel:ACTIVATES]->(y)
      SET rel.regulation_ids=regIds, rel.enzreaction_ids = enzs;

    MATCH (x)-[:REGULATES]->(r:Regulation)-[:REGULATES]->(y)
    WHERE r.mode='-' and exists(r.enzreaction_id)
    WITH x, y, collect(r.eid) as regIds, collect(r.enzreaction_id) as enzs
      MERGE (x)-[rel:INHIBITS]->(y)
      SET rel.regulation_ids=regIds, rel.enzreaction_ids = enzs;

    MATCH (x)-[:REGULATES]->(r:Regulation)-[:REGULATES]->(y)
    WHERE r.mode='' and exists(r.enzreaction_id)
    WITH x, y, collect(r.eid) as regIds, collect(r.enzreaction_id) as enzs
      MERGE (x)-[rel:REGULATES]->(y)
      SET rel.regulation_ids=regIds, rel.enzreaction_ids = enzs;

    MATCH (x)-[:REGULATES]->(r:Regulation)-[:REGULATES]->(y)
    WHERE r.mode='+'
    WITH x, y, collect(r.eid) as regIds
      MERGE (x)-[rel:ACTIVATES]->(y)
      SET rel.regulation_ids=regIds;

    MATCH (x)-[:REGULATES]->(r:Regulation)-[:REGULATES]->(y)
    WHERE r.mode='-'
    WITH x, y, collect(r.eid) as regIds
      MERGE (x)-[rel:INHIBITS]->(y)
      SET rel.regulation_ids=regIds;

    MATCH (x)-[:REGULATES]->(r:Regulation)-[:REGULATES]->(y)
    WHERE not exists(r.mode) or r.mode=''
    WITH x, y, collect(r.eid) as regIds
      MERGE (x)-[rel:REGULATES]->(y)
      SET rel.regulation_ids=regIds;

    MATCH (n:Regulation)
    DETACH DELETE n;

remove constraint:
  type: GDS
  description: remove constrain so that reversed reactions can be created
  query: DROP CONSTRAINT constraint_db_BioCyc_eid IF EXISTS;


correct_reaction_direction:
  type: GDS
  description: correct the input and out directions for reactions, create reversed reaction for each reversible reaction
  query: |
    MATCH (n:Reaction:db_BioCyc)
    WHERE n.direction ENDS WITH 'RIGHT-TO-LEFT' and not exists(n.reversed)
    SET n.reversed=True
    WITH n
    CALL {
      WITH n
        MATCH (n)-[r:CONSUMED_BY]-(c)
        RETURN r, n as from_node, 'PRODUCES' as type, properties(r) as props, c as to_node
    UNION
      WITH n
        MATCH (n)-[r:PRODUCES]-(c)
        RETURN r, c as from_node, 'CONSUMED_BY' as type, properties(r) as props, n as to_node
    }
    CALL apoc.create.relationship(from_node, type, props, to_node) YIELD rel
    DELETE r;

    MATCH (n:Reaction:db_BioCyc)
    WHERE n.direction = 'REVERSIBLE'
    WITH n
      MATCH (n)-[:PRODUCES]-(p), (n)-[:CONSUMED_BY]-(c)
      WHERE id(p) = id(c)
      WITH collect(distinct n) as undirectReactions
        MATCH (n:Reaction:db_BioCyc)
        WHERE n.direction = 'REVERSIBLE' and not exists(n.reversed) and not n in undirectReactions
        SET n.reversed=True
        WITH collect(n) as inputNodes
          call apoc.refactor.cloneNodesWithRelationships(inputNodes) yield input, output
          return count(*);

    MATCH (n:Reaction:db_BioCyc)
    WITH n.eid as id, collect(n) as nodes
      WHERE size(nodes) > 1
      WITH nodes[0] as n
        SET n.eid = n.biocyc_id + '_r'
        WITH n
        CALL {
          WITH n
            MATCH (n)-[r:CONSUMED_BY]-(c)
            RETURN r, n as from_node, 'PRODUCES' as type, properties(r) as props, c as to_node
        UNION
          WITH n
            MATCH (n)-[r:PRODUCES]-(c)
            RETURN r, c as from_node, 'CONSUMED_BY' as type, properties(r) as props, n as to_node
        }
        CALL apoc.create.relationship(from_node, type, props, to_node) YIELD rel
        DELETE r;

    MATCH (n:Reaction)
    WHERE n.eid ENDS WITH '_r' and not n.displayName ENDS WITH '_r'
    SET n.displayName = n.displayName + '_r';

recreate_constraint:
  type: GDS
  description: recreate constrain for eid
  query: CREATE CONSTRAINT constraint_db_BioCyc_eid IF NOT EXISTS ON (n:db_BioCyc) ASSERT n.eid IS UNIQUE;

reverse_Gene_TransUnit_relationship:
  type: GDS
  description: reverse Gene to TransactionUnit relationship.
  query: |
    MATCH (n:TranscriptionUnit:db_BioCyc)-[r:ELEMENT_OF]-(g:Gene)
    MERGE (n)-[rr:HAS_GENE]->(g)
    ON CREATE SET rr = properties(r)
    DELETE r;

remove_DNABindingSite_nodes:
  type: GDS
  description: remove DNABindingSite nodes. Most of the nodes are orphan nodes.
  query: |
    MATCH (n:DNABindingSite)
    DETACH DELETE n;

remove_TYPEOF_relationship:
  type: GDS
  description: remove TYPE_OF relationships to BioCycClass.
  query: |
    MATCH (n)-[r:TYPE_OF]->()
    DELETE r;

remove_orphan_Class_nodes:
  type: GDS
  description: remove orphan BioCycClass nodes.
  query: |
    MATCH (n:BioCycClass)
    WHERE not (n)-[]-()
    DELETE n;

remove_Enzyme_nodes:
  type: GDS
  description: remove Enzyme nodes.
  query: |
    MATCH (n:db_Enzyme)
    DETACH DELETE n;

remove_synonym_nodes:
  type: GDS
  description: set synonym properties, then remove synonym nodes
  query: |
    MATCH (n:db_BioCyc)-[:HAS_SYNONYM]-(s:Synonym)
    WITH n, collect(s.name) as syns
    SET n.synonyms=syns;

    MATCH (s:Synonym)
    DETACH DELETE s;

label_currency_metabolites:
  type: GDS
  description: Label common compound nodes as CurrencyMetabolite
  query: |
    MATCH (n:db_BioCyc)
    WHERE n.biocyc_id in [
      'PROTON', 'WATER', 'OXYGEN-MOLECULE', 'NADP', 'NADPH', 'ATP', 'PPI', 'CARBON-DIOXIDE', 'Pi',
      'ADP', 'CO-A', 'UDP', 'NAD', 'NADH', 'AMP', 'AMMONIA', 'HYDROGEN-PEROXIDE', 'Acceptor',
      'Donor-H2', '3-5-ADP', 'GDP', 'CARBON-MONOXIDE', 'GTP', 'FAD', 'NADH-P-OR-NOP',
      'NAD-P-OR-NOP', 'AMMONIUM', 'NA+'
    ]
    SET n:CurrencyMetabolite;

set_detail_property:
  type: GDS
  description: change description property to detail since description is used by sankey for other purpose
  query: |
    MATCH (n)
    WHERE exists(n.description)
    SET n.detail = n.description
    REMOVE n.description;

mark_secondaries:
  type: GDS
  description: Compounds meantioned in pathways which are not primary are secondary
  query: |
    MATCH (:Compound)-[l:CONSUMED_BY|PRODUCES]-(:Reaction)-[:IN_PATHWAY]-(:Pathway)
    WHERE NOT EXISTS(l.PRIMARY)
    SET l.SECONDARY = "";
#    MATCH ch=(c:Compound)-[l:CONSUMED_BY|PRODUCES]-(r:Reaction)-[:IN_PATHWAY]-(:Pathway)
#    WHERE isEmpty((c)-[:PRIMARY_OF]->(:Pathway)-[:IN_PATHWAY]-(r))
#    SET l.SECONDARY = "";

mark_implicit_primaries:
  type: GDS
  description: Compounds which are not in patways need to be marked primary by default
  query: |
    MATCH (c:Compound)-[l:CONSUMED_BY|PRODUCES]-(r:Reaction)
    WHERE isEmpty((r)-[:IN_PATHWAY]->(:Pathway))
    SET l.PRIMARY = "Set implicitly";

delete_primary_of:
  type: GDS
  description: Delete primary_of relationships to not interfere with analysis
  query: |
    MATCH (c:Compound)-[l:PRIMARY_OF]->(p:Pathway)
    DELETE l;
























