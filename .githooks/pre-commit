#!/bin/sh

# Script is used for running git hooks. This script can be expanded to perform
# other "git hook" actions, but is currently only limited to 'pre-commit'.
#
# How it works
# The script will start at the ***ARANGO_USERNAME*** project directory and iterate over all
# directories, looking for the .githook directory. It will then execute
# the 'pre-commit' hook if found.
#
# To use
# (1) Each directory MUST have a .githook directory
# (2) Each .githook directory must have an executable
# (3) Each .githook action MUST follow the naming conventions laid out by https://git-scm.com/docs/githooks


__dir__="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
***ARANGO_USERNAME***_dir="$( cd "$( dirname "${__dir__}}" )" &> /dev/null && pwd )"

hook_name="pre-commit"
hook_dir=".githooks"
hook_path=".githooks/$hook_name"

# Formatting
b=$(tput bold)
n=$(tput sgr0)
HEADER () {
  echo "${b}${1}${n}"
}

# TODO: Refactor to execute other hooks if needed
for d in */; do
  code_path="$***ARANGO_USERNAME***_dir/$d$hook_dir"
  if [[ -d $code_path ]];
  then
    HEADER "ü§ñ  Running hook ($hook_name) checks for $code_path"
    # Execute hook
    . "$code_path/$hook_name"
    exit_code=$?

    if [ $exit_code != 0 ]; then
      echo "‚ùå Linting check has failed. You may use git commit --no-verify to skip."
      exit $exit_code
    fi
  fi
done

exit 0
