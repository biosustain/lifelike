name: Production Deployment

on:
    pull_request:
        types: [labeled]

env:
    SERVICE_ACCOUNT_CRED: ${{ secrets.GCE_SA_KEY }}
    POSTGRES_HOST: ${{ secrets.PROD_POSTGRES_HOST }}
    POSTGRES_PORT: ${{ secrets.PROD_POSTGRES_PORT }}
    POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
    POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
    POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
    NEO4J_HOST: ${{ secrets.PROD_NEO4J_HOST }}
    NEO4J_AUTH: ${{ secrets.PROD_NEO4J_AUTH }}
    FLASK_APP: ${{ secrets.PROD_FLASK_APP }}
    FLASK_APP_CONFIG: ${{ secrets.PROD_FLASK_APP_CONFIG }}
    FLASK_ENV: ${{ secrets.PROD_FLASK_ENV }}
    PROJECT_ID: ${{ secrets.GCE_PROJECT }}
    GCE_INSTANCE: kg-prod
    GCE_INSTANCE_ZONE: us-central1-a
    CLOUD_SQL_ALIAS: ${{ secrets.PROD_CLOUD_SQL_ALIAS }}
    GCE_BACKUP_BUCKET: ${{ secrets.POSTGRES_BACKUP_BUCKET }}
    # TODO: Delete these later after refactor, redundant
    NEO4J_ENTITIES_HOST: ${{ secrets.NEO4J_ENTITIES_HOST }}
    NEO4J_ENTITIES_PASS: ${{ secrets.NEO4J_ENTITIES_PASS }}
    NEO4J_ENTITIES_USER: ${{ secrets.NEO4J_ENTITIES_USER }}

jobs:
    setup-build-publish-deploy:

        name: Setup, Build, Publish, and Deploy
        runs-on: ubuntu-latest

        if: contains(github.event.pull_request.labels.*.name, 'production')

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            # Setup gcloud CLI
            # https://github.com/GoogleCloudPlatform/github-actions
            - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
              with:
                version: '286.0.0'
                service_account_key: ${{ secrets.GCE_SA_KEY }}
                project_id: ${{ secrets.GCE_PROJECT }}

            # Configure Docker to use gcloud command line tool
            - run: |-
                gcloud --quiet auth configure-docker

            # Build the Docker images
            - name: Build
              run: |-
                docker build --tag "gcr.io/$PROJECT_ID/kg-appserver-prod:latest" -f ./appserver/Dockerfile.prod ./appserver/
                docker build --tag "gcr.io/$PROJECT_ID/kg-webserver-prod:latest" -f ./client/Dockerfile.prod ./client/

            # # Push Docker image to Google Container Registry
            - name: Publish
              run: |-
                docker push "gcr.io/$PROJECT_ID/kg-appserver-prod:latest"
                docker push "gcr.io/$PROJECT_ID/kg-webserver-prod:latest"

            - name: Deploy Setup
              run: |-
                echo "POSTGRES_HOST=$POSTGRES_HOST" >> prod.env
                echo "POSTGRES_PORT=$POSTGRES_PORT" >> prod.env
                echo "POSTGRES_USER=$POSTGRES_USER" >> prod.env
                echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> prod.env
                echo "POSTGRES_DB=$POSTGRES_DB" >> prod.env
                echo "NEO4J_HOST=$NEO4J_HOST" >> prod.env
                echo "NEO4J_AUTH=$NEO4J_AUTH" >> prod.env
                echo "FLASK_APP=$FLASK_APP" >> prod.env
                echo "FLASK_APP_CONFIG=$FLASK_APP_CONFIG" >> prod.env
                echo "FLASK_ENV=$FLASK_ENV" >> prod.env
                echo "DOCKER_USER=_json_key" >> prod.env
                echo "PROJECT_ID=$PROJECT_ID" >> prod.env
                echo "NEO4J_ENTITIES_HOST=$NEO4J_ENTITIES_HOST" >> prod.env
                echo "NEO4J_ENTITIES_PASS=$NEO4J_ENTITIES_PASS" >> prod.env
                echo "NEO4J_ENTITIES_USER=$NEO4J_ENTITIES_USER" >> prod.env
                echo "CLOUD_SQL_ALIAS=$CLOUD_SQL_ALIAS" >> prod.env
                echo "GCE_BACKUP_BUCKET=$GCE_BACKUP_BUCKET >> prod.env"
                echo "$SERVICE_ACCOUNT_CRED" >> keyfile.json
                gcloud compute scp prod.env ***ARANGO_USERNAME***@$GCE_INSTANCE:/srv --zone $GCE_INSTANCE_ZONE
                gcloud compute scp keyfile.json ***ARANGO_USERNAME***@$GCE_INSTANCE:/srv --zone $GCE_INSTANCE_ZONE
                gcloud compute scp ./deployment/bin/startup.sh ***ARANGO_USERNAME***@$GCE_INSTANCE:/srv --zone $GCE_INSTANCE_ZONE
                gcloud compute ssh ***ARANGO_USERNAME***@$GCE_INSTANCE --zone $GCE_INSTANCE_ZONE --command='chmod a+x /srv/startup.sh';

            - name: Deploy
              run: |-
                gcloud compute ssh ***ARANGO_USERNAME***@$GCE_INSTANCE --zone $GCE_INSTANCE_ZONE --command='/srv/startup.sh -t production';

            - name: Applying database migrations
              run: |-
                gcloud compute ssh ***ARANGO_USERNAME***@$GCE_INSTANCE --zone $GCE_INSTANCE_ZONE --command='/srv/migration-manager.sh';

            - name: Clean up images
              run: |-
                gcloud compute ssh ***ARANGO_USERNAME***@$GCE_INSTANCE --zone $GCE_INSTANCE_ZONE --command='sudo docker system prune';