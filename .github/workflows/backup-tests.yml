name: Database backups tests

on:
  workflow_dispatch:
  pull_request:
  schedule:
    # Run once a week on sunday at 00:00
    - cron: "0 0 * * 0"

jobs:
  get-sql-instances:
    name: List Cloud SQL instances
    runs-on: ubuntu-latest
    outputs:
      instances: ${{ steps.instances.outputs.json }}
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        id: auth
        with:
          credentials_json: "${{ secrets.GCE_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Get all Cloud SQL instances
        id: instances
        run: |
          INSTANCES=$( \
            gcloud sql instances list \
            --format="value(name.list())" \
            --filter="labels.test-backups=true" \
            | jq -R -s -c 'split("\n") | map(select(.!=""))')
          echo ::set-output name=json::$INSTANCES

  restore-and-test:
    needs: get-sql-instances
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        instance: ${{ fromJSON(needs.get-sql-instances.outputs.instances) }}
        type: ["AUTOMATED", "ON_DEMAND"]
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        id: auth
        with:
          credentials_json: "${{ secrets.GCE_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: google-github-actions/setup-gcloud@v0
        with:
          install_components: beta

      - name: Get latest ${{ matrix.type }} backup ID
        id: backup-id
        run: |
          BACKUP_ID=$( \
            gcloud sql backups list \
              --instance="${{ matrix.instance }}" \
              --filter="status=SUCCESSFUL AND type=${{ matrix.type }}" \
              --format="value(id)" --sort-by="-startTime" \
              | head -n 1)
          echo "::set-output name=id::$BACKUP_ID"

      - name: Get instance details
        if: ${{ steps.backup-id.outputs.id != '' }}
        id: instance-details
        run: |
          INSTANCE=$( \
            gcloud sql instances describe \
              --format="value(databaseVersion, settings.tier, region, project)" \
              ${{ matrix.instance }})
          echo ::set-output name=version::$(echo $INSTANCE | cut -d' ' -f1)
          echo ::set-output name=tier::$(echo $INSTANCE | cut -d' ' -f2)
          echo ::set-output name=region::$(echo $INSTANCE | cut -d' ' -f3)
          echo ::set-output name=project::$(echo $INSTANCE | cut -d' ' -f4)

      - name: Create temporary Cloud SQL instance
        if: ${{ steps.backup-id.outputs.id != '' }}
        id: create-temp-instance
        run: |
          TEMP_INSTANCE_NAME=$(echo "temp-${{ matrix.instance }}-${{ matrix.type }}-${{ github.run_id }}" | sed 's/_/-/g' | awk '{print tolower($0)}')
          gcloud beta sql instances create "$TEMP_INSTANCE_NAME" \
            --database-version=${{ steps.instance-details.outputs.version }} \
            --tier=${{ steps.instance-details.outputs.tier }} \
            --region=${{ steps.instance-details.outputs.region }} \
            --labels="temp-instance=true,workflow-run=${{ github.run_id }}"
          echo ::set-output name=temp_instance_name::$TEMP_INSTANCE_NAME

      - name: Restore backup into temporary instance
        if: ${{ steps.backup-id.outputs.id != '' }}
        run: |
          gcloud sql backups restore --quiet \
            --restore-instance=${{ steps.create-temp-instance.outputs.temp_instance_name }} \
            --backup-instance=${{ matrix.instance }} \
            ${{ steps.backup-id.outputs.id }}

      - name: Reset postgres password
        if: ${{ steps.backup-id.outputs.id != '' }}
        run: |
          gcloud sql users set-password \
            --instance=${{ steps.create-temp-instance.outputs.temp_instance_name }} \
            --password=password postgres

      - uses: mattes/gce-cloudsql-proxy-action@v1
        if: ${{ steps.backup-id.outputs.id != '' }}
        with:
          creds: ${{ secrets.GCE_SA_KEY }}
          instance: ${{ steps.instance-details.outputs.project }}:${{ steps.instance-details.outputs.region }}:${{ steps.create-temp-instance.outputs.temp_instance_name }}

      - name: Setup PostgreSQL client
        if: ${{ steps.backup-id.outputs.id != '' }}
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends postgresql-client

      - name: Query temporary instance
        if: ${{ steps.backup-id.outputs.id != '' }}
        env:
          PGPASSWORD: password
          PGHOST: localhost
        run: |
          RESULTS=$( \
            psql -U postgres -d postgres \
              -c 'SELECT count(*) FROM files;')
          echo "RESULTS<<EOF" >> $GITHUB_ENV
          echo "$RESULTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Delete temporary instance
        if: ${{ steps.backup-id.outputs.id != '' }}
        run: |
          gcloud sql instances delete --quiet \
            ${{ steps.create-temp-instance.outputs.temp_instance_name }}

      - name: Notify results by email
        uses: licenseware/send-email-notification@v1
        with:
          api-key: "***REMOVED***"
          # api-key: ${{ secrets.SENDGRID_API_KEY }}
          from-email: no-reply@lifelike.bio
          to-email: darede@biosustain.dtu.dk
          # to-email: ${{ secrets.BACKUP_TEST_NOTIFY_EMAILS }}
          subject: "[PASS âœ…] Lifelike PostgreSQL backup test results"
          markdown-body: |
            # Lifelike PostgreSQL backup test results

            ## Details
             - Cloud SQL instance: ${{ matrix.instance }}
             - Temporary test instance: ${{ steps.create-temp-instance.outputs.temp_instance_name }}
             - Type: ${{ matrix.type }}
             - Workflow Run ID: ${{ github.run_id }}

            ## Results
            ```
            ${{ env.RESULTS }}
            ```

            Details about this workflow run [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
