name: Staging Deployment

on:
  push:
    branches:
      # TODO: refactor this to use ansible
      # only trigger when branches match refs/heads/staging/
      - 'staging/**'

env:
    ELASTICSEARCH_HOSTS: ${{ secrets.ELASTICSEARCH_HOSTS }}
    POSTGRES_HOST: ${{ secrets.STAGING_POSTGRES_HOST }}
    POSTGRES_PORT: ${{ secrets.STAGING_POSTGRES_PORT }}
    POSTGRES_USER: ${{ secrets.STAGING_POSTGRES_USER }}
    POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
    POSTGRES_DB: ${{ secrets.STAGING_POSTGRES_DB }}
    NEO4J_HOST: ${{ secrets.STAGING_NEO4J_HOST }}
    NEO4J_AUTH: ${{ secrets.STAGING_NEO4J_AUTH }}
    FLASK_APP: ${{ secrets.STAGING_FLASK_APP }}
    FLASK_APP_CONFIG: ${{ secrets.STAGING_FLASK_APP_CONFIG }}
    FLASK_ENV: ${{ secrets.STAGING_FLASK_ENV }}
    PROJECT_ID: ${{ secrets.GCE_PROJECT }}
    GITHUB_HASH: ${{ github.sha }}
    GCE_INSTANCE: kg-staging
    GCE_INSTANCE_ZONE: us-central1-a
    GCE_SERVICE_ACCOUNT: ${{ secrets.GCE_SA_KEY }}
    CLOUD_SQL_ALIAS: ${{ secrets.STAGING_CLOUD_SQL_ALIAS }}
    GCE_BACKUP_BUCKET: ${{ secrets.POSTGRES_BACKUP_BUCKET }}
    SENTRY_KEY: ${{ secrets.SENTRY_KEY }}
    REDIS_HOST: ${{ secrets.REDIS_HOST }}
    REDIS_PORT: ${{ secrets.REDIS_PORT }}
    DOMAIN: https://test.lifelike.bio

jobs:

    setup-build-publish-deploy:

        name: Setup, Build, Publish, and Deploy
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            # Setup gcloud CLI
            # https://github.com/GoogleCloudPlatform/github-actions
            - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
              with:
                version: '286.0.0'
                service_account_key: ${{ secrets.GCE_SA_KEY }}
                project_id: ${{ secrets.GCE_PROJECT }}

            # Configure Docker to use gcloud command line tool
            - run: |-
                gcloud --quiet auth configure-docker

            - name: Build appserver image
              uses: whoan/docker-build-with-cache-action@v5
              with:
                username: _json_key
                password: ${{ secrets.GCE_SA_KEY }}
                registry: gcr.io
                image_name: ${{ secrets.GCE_PROJECT }}/kg-appserver
                image_tag: ${{ github.sha }}
                context: ./appserver
                dockerfile: ./Dockerfile

            - name: Build Client and Nginx Image
              uses: whoan/docker-build-with-cache-action@v5
              with:
                username: _json_key
                password: ${{ secrets.GCE_SA_KEY }}
                registry: gcr.io
                image_name: ${{ secrets.GCE_PROJECT }}/kg-webserver
                image_tag: ${{ github.sha }}
                context: ./client
                dockerfile: ./Dockerfile
                build_extra_args: "--build-arg=build_environment=staging --build-arg=nginx_conf=staging.conf"

            - name: Build Redis
              uses: whoan/docker-build-with-cache-action@v5
              with:
                username: _json_key
                password: ${{ secrets.GCE_SA_KEY }}
                registry: gcr.io
                image_name: ${{ secrets.GCE_PROJECT }}/kg-cache-service
                image_tag: ${{ github.sha }}
                context: ./cache-invalidator
                dockerfile: ./Dockerfile

            - name: Build NLP
              uses: whoan/docker-build-with-cache-action@v5
              with:
                username: _json_key
                password: ${{ secrets.GCE_SA_KEY }}
                registry: gcr.io
                image_name: ${{ secrets.GCE_PROJECT }}/kg-nlpapi
                image_tag: ${{ github.sha }}
                context: ./nlp
                dockerfile: ./Dockerfile

