global: {}
nameOverride: ""
fullnameOverride: ""

ingress:
  enabled: true
  hostname: ***ARANGO_DB_NAME***.local
  annotations: {}
  className: ""
  tls: []

# ------------------------------------------------------------------------------
# API (appserver)
# ------------------------------------------------------------------------------
api:
  image:
    repository: ***ARANGO_DB_NAME***.azurecr.io/kg-appserver
    imagePullPolicy: IfNotPresent
    tag: latest
    imagePullSecrets:
    - name: ***ARANGO_DB_NAME***-registry

  # -- Extra environment variables to pass to the API server
  extraEnv: {}

  # -- Number of replicas running for the API server
  replicaCount: 1
  autoScaling:
    # -- Enable or disable the API server autoscaling
    enabled: false
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  strategyType: Recreate

  lmdb:
    loadEnabled: false

  service:
    type: ClusterIP
    port: 5000

  resources:
    requests:
      cpu: 250m
      memory: 1600Mi
    # limits:
    #   cpu: 100m
    #   memory: 128Mi

  podSecurityContext:
    fsGroup: 1000

  defaultPodSecurityContext:
    enabled: true
    # runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000

  livenessProbe:
    path: /meta/
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

  readinessProbe:
    path: /meta/
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

  podAnnotations: {}
  podLabels: {}
  affinity: {}
  tolerations: []
  nodeSelector: {}
  schedulerName: null

  extraVolumes:
  - name: lmdb
    hostPath:
      path: /mnt/data/lmdb
  extraVolumeMounts:
  - name: plugins
    mountPath: /home/n4j/neo4japp/services/annotations/lmdb
    readOnly: false

  dbWaiter:
    image:
      repository: willwill/wait-for-it
      tag: latest
      imagePullPolicy: IfNotPresent
    timeoutSeconds: 30

# ------------------------------------------------------------------------------
# Frontend (webserver)
# ------------------------------------------------------------------------------
frontend:
  image:
    repository: ***ARANGO_DB_NAME***.azurecr.io/kg-webserver
    tag: "latest"
    imagePullPolicy: IfNotPresent
    imagePullSecrets:
    - name: ***ARANGO_DB_NAME***-registry

  replicaCount: 1
  autoScaling:
    # -- Enable or disable the API server autoscaling
    enabled: false
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  service:
    type: ClusterIP
    port: 80

  extraEnv: {}

  livenessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10
  readinessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

  resources: {}
  podSecurityContext: {}
  defaultPodSecurityContext: {}
  podAnnotations: {}
  podLabels: {}
  affinity: {}
  tolerations: []
  nodeSelector: {}

# ------------------------------------------------------------------------------
# PDF Parser
# ------------------------------------------------------------------------------
pdfparser:
  image:
    repository: ***ARANGO_DB_NAME***.azurecr.io/kg-pdfparser
    tag: latest
    imagePullPolicy: IfNotPresent
    imagePullSecrets:
    - name: ***ARANGO_DB_NAME***-registry

  # -- Number of replicas running for the API server
  replicaCount: 1
  autoScaling:
    # -- Enable or disable the API server autoscaling
    enabled: false
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  service:
    type: ClusterIP
    port: 7600

  podSecurityContext: {}
  defaultPodSecurityContext:
    enabled: true
    # runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000

  livenessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

  readinessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

  podAnnotations: {}
  resources: {}
  podLabels: {}
  extraEnv: {}
  affinity: {}
  tolerations: []
  nodeSelector: {}
  schedulerName: null

# ------------------------------------------------------------------------------
# PDF Parser
# ------------------------------------------------------------------------------
statisticalEnrichment:
  image:
    repository: ***ARANGO_DB_NAME***.azurecr.io/kg-statistical-enrichment
    tag: latest
    imagePullPolicy: IfNotPresent
    imagePullSecrets:
    - name: ***ARANGO_DB_NAME***-registry

  replicaCount: 1

  service:
    type: ClusterIP
    port: 7600

  podSecurityContext: {}
  defaultPodSecurityContext:
    enabled: true
    # runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000

  livenessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10
  readinessProbe:
    failureThreshold: 20
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 10

  podAnnotations: {}
  resources: {}
  podLabels: {}
  extraEnv: {}
  affinity: {}
  tolerations: []
  nodeSelector: {}

# ------------------------------------------------------------------------------
# PostgreSQL database
# ------------------------------------------------------------------------------

postgresql:
  # -- Whether to automatically deploy a new PostgreSQL database
  enabled: true
  postgresqlDatabase: ***ARANGO_DB_NAME***
  postgresqlUsername: postgres
  postgresqlPassword: ***ARANGO_DB_NAME***
  serviceAccount:
    enabled: true
  readinessProbe:
    enabled: true
    initialDelaySeconds: 20
    periodSeconds: 25
  livenessProbe:
    initialDelaySeconds: 60

# -- Optionally, bring your own PostgreSQL
postgresqlExternal:
  host: postgres.local
  port: 5432
  user: postgres
  password: password
  database: ***ARANGO_DB_NAME***

# ------------------------------------------------------------------------------
# Neo4j database
# ------------------------------------------------------------------------------
# All values: https://github.com/neo4j-contrib/neo4j-helm/blob/master/values.yaml
neo4j:
  # imageTag: "3.5"
  # -- Whether to automatically deploy a new Neo4j cluter
  enabled: true
  # -- Neo4j password
  neo4jPassword: password
  core:
    # -- Whether to deploy a santalone server or a replicated cluster
    standalone: true
    numberOfServers: 1
    persistentVolume:
      # -- Size of the persistent volume for each server
      size: 5Gi
  acceptLicenseAgreement: 'yes'

neo4jExternal:
  host: neo4j.local
  port: 7687
  user: neo4j
  password: password

# ------------------------------------------------------------------------------
# Elasticsearch
# ------------------------------------------------------------------------------
# -- All values: https://github.com/elastic/helm-charts/blob/main/elasticsearch/values.yaml
elasticsearch:
  # -- When enabled, a new Elasticsearch cluster will be deployed using the official Helm chart
  enabled: true

  # -- Number of replicas for the Elasticsearch cluster
  replicas: 1

  # -- If replicas is 1, status stays in yellow, otherwise change to green
  clusterHealthCheckParams: wait_for_status=yellow&timeout=1s

  fullnameOverride: elasticsearch

  extraEnvs:
  - name: ELASTIC_USERNAME
    value: elastic
  - name: ELASTIC_PASSWORD
    value: password

  # -- Elasticsearch confguration
  esConfig:
    elasticsearch.yml: |
      node.store.allow_mmap: false

  # -- Persistent storage for Elasticsearch nodes
  volumeClaimTemplate:
    resources:
      requests:
        storage: 10Gi

# -- When elasticsearch.enabled is false, this Elsaicsearch configuration will be used
elasticsearchExternal:
  host: elasticsearch.local
  port: 9200
  user: ""
  password: ""


logstash:
  persistence:
    enabled: true
  logstashConfig:
    logstash.yml: |
      http.host: 0.0.0.0
      xpack.monitoring.enabled: false

  logstashPipeline:
    uptime.conf: |
      input { exec { command => "uptime" interval => 30 } }
      output {
        elasticsearch {
          hosts => ["http://elasticsearch-master:9200"]
          user => '${ELASTIC_USERNAME}'
          password => '${ELASTIC_PASSWORD}'
          index => "annotations"
        }
      }

  extraEnvs:
    - name: "ELASTIC_USERNAME"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-master-credentials
          key: username
    - name: "ELASTIC_PASSWORD"
      valueFrom:
        secretKeyRef:
          name: elasticsearch-master-credentials
          key: password

# ------------------------------------------------------------------------------
# Redis (cache)
# ------------------------------------------------------------------------------

# All values: https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
redis:
  # -- When enabled, a new Redis cluster will be deployed using the Bitnami Helm chart
  enabled: true

  # -- Allowed values: `standalone` or `replication`
  architecture: standalone

  auth:
    password: password

  master:
    # -- As we use Redis as a cache, we don't need persistence
    persistence:
      enabled: false
    extraFlags:
      - --maxmemory-policy allkeys-lru

  replica:
    persistence:
      enabled: false
    extraFlags:
      - --maxmemory-policy allkeys-lru

  # -- Redis configuration as a fast cache
  commonConfiguration: |-
    # Disable persistence
    save ""
    # Disable AOF https://redis.io/topics/persistence#append-only-file
    appendonly no


# -- When redis.enabled is false, this Redis configuration will be used
redisExternal:
  host: redis.local
  port: 6379
  password: ""

# ------------------------------------------------------------------------------
# Kubernetes Service Account
# ------------------------------------------------------------------------------
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
