@use 'variables';
// our version of boostrap is not prep yet to use "use"
@import 'variables';
@import '~bootstrap/scss/mixins/deprecate';
@import '~bootstrap/scss/mixins/nav-divider';

$search-accent-color: variables.$red;
$selection-accent-color: #ff0;
$node-label-shadow: rgba(187, 187, 187, 0.9);
$input-spacing: map-get(variables.$spacers, 2);
$active-stroke-width: 3px;
$trasition: 100ms;

@mixin panel-divider {
  width: 100%;
  clear: both;
  content: '';
  display: block;
  @include nav-divider(variables.$dropdown-divider-bg, variables.$dropdown-divider-margin-y, true);
}

@mixin panel-align-presets {
  // align with button presets
  padding: variables.$btn-padding-y variables.$btn-padding-x;
  text-align: left;
}

@mixin advanced-panel {
  form {
    text-align: left;

    label {
      margin-bottom: 0;
    }

    [type='checkbox'] {
      align-self: center;
      margin-right: $input-spacing;
    }

    [ngbbuttonlabel] {
      flex-grow: 1;
    }

    > *,
    .form-group {
      width: 100%;
      display: flex;
      flex-wrap: wrap;

      &:before {
        @include panel-divider;
      }

      > * {
        @include panel-align-presets;
      }
    }

    > [ngbradiogroup] {
      padding-left: $btn-padding-x;

      div {
        padding-left: 0;
        width: 100%;
      }
    }
  }

  .scrollbar-with-value {
    display: flex;
    flex-wrap: wrap;
    align-items: center;

    :first-child {
      margin-right: $input-spacing;
    }

    :last-child {
      flex-grow: 1;
      margin-left: $input-spacing;
      margin-right: $input-spacing;
    }
  }
}

@mixin legend {
  $box-width: 1.75rem;
  $box-height: 0.75rem;
  //pointer-events: none;
  width: 100%;
  @include panel-align-presets;
  margin-bottom: 0;
  padding-bottom: 0;
  display: block;

  fieldset {
    padding: map-get(variables.$spacers, 2) map-get(variables.$spacers, 3);
    margin: map-get(variables.$spacers, 2); // 0;

    legend {
      margin: 0 - map-get(variables.$spacers, 2);
      padding: 0 map-get(variables.$spacers, 2);
    }
  }

  // Nice abstract to display description list using grid layout
  dl.d-grid {
    display: grid;
    grid-template-columns: auto;
    grid-auto-columns: 1fr;
    grid-auto-flow: column;
    column-gap: 0.5rem;
    row-gap: 0.5rem;

    > *:not(dt, dd) {
      display: contents;
    }

    dt {
      grid-column-start: 1;
    }

    dd {
      margin: 0;
    }
  }

  &:before {
    //@include panel-divider;
  }

  .title {
    margin-top: 0.75rem;
    margin-bottom: 0.6rem;

    //&:after {
    //  @include panel-divider;
    //}
  }

  .body {
    margin-bottom: 0;
  }

  .box {
    display: inline-block;
    line-height: 1.5;

    &:before {
      border-radius: 0.1rem;
      border-style: solid;
      border-width: 2px;
      content: '';
      display: inline-block;
      height: $box-height;
      width: $box-width;
      vertical-align: middle;
    }
  }

  .circular {
    .box:before {
      border-color: black;
      border-style: dashed;
    }
  }
}

@mixin search-blink($what) {
  @keyframes searchBlink#{$what} {
    50% {
      #{$what}: $search-accent-color;
    }
  }
  animation-duration: 750ms;
  animation-name: searchBlink#{$what};
}

@mixin labelShadow {
  foreignObject div {
    box-shadow: 0 0 $active-stroke-width $active-stroke-width $node-label-shadow;
    background-color: $node-label-shadow;
  }
}

@mixin active($active) {
  @if ($active) {
    opacity: var(--active-opacity);
  } @else {
    opacity: var(--inactive-opacity);
  }
}

@mixin focused {
  rect {
    stroke: $selection-accent-color;
    stroke-width: $active-stroke-width;
  }
}

@mixin sankey {
  display: block;
  height: 100%;

  min-height: 100%;
  overflow: hidden;
  position: relative;
  transform-origin: 0 0;
  width: 100%;

  svg {
    background-color: variables.$window-background;
    font-size: 0.6em;
    height: 100%;
    width: 100%;

    > g {
      .nodes {
        $label-margin: 2 * $active-stroke-width;
        $node-width: 10px;

        shape-rendering: crispEdges;
        z-index: 1;

        g {
          //transition: opacity $trasition, font-size $trasition;

          rect {
            cursor: move;
            shape-rendering: crispEdges;
          }

          foreignObject {
            // 1x1 px - just for positioning
            overflow: visible;

            div {
              // actual label (dynamically sized)
              //transition: background-color $trasition, max-width $trasition;
              border-radius: $active-stroke-width;
              display: inline-block;
              overflow: hidden;
              white-space: nowrap;
              text-overflow: ellipsis;
              // ellipsis itself is about 1.2ch wide
              max-width: calc(var(--ellipsis-after-x-characters) + 1.2ch);
              pointer-events: none;
              padding: 0 0.3em;
            }

            &[label-anchor='left'] div {
              transform: translate(calc(-100% - #{$node-width / 2 + $label-margin}), -50%);
            }

            &[label-anchor='right'] div {
              transform: translate(#{$node-width / 2 + $label-margin}, -50%);
            }
          }

          &[highlighted='false'],
          &[transitively-selected='false'],
          &[selected='false'] {
            // fade away other nodes
            @include active($active: false);
          }

          &:hover,
          &[selected='true'],
          &[transitively-selected='true'] {
            // mark nodes to not fade away
            @include active($active: true);
          }

          &:hover,
          &[selected='true'] {
            // add focus border
            @include focused;
            // render label shadow
            @include labelShadow;
          }

          &[searched='true'] {
            // render label shadow
            @include labelShadow;

            foreignObject div {
              // render red border on searched labels
              box-shadow: 0 0 0 $active-stroke-width $search-accent-color;
            }
          }

          &:hover,
          &[focused='true'],
          &[selected='true'] {
            // enlarge text on interaction
            font-size: 2em;
          }

          &:hover,
          &[focused='true'],
          &[selected='true'] {
            foreignObject div {
              // allow for whole label to be visible
              max-width: fit-content;
            }
          }

          &[focused='true'] foreignObject div {
            // blink background when focused
            @include search-blink('background-color');
          }
        }
      }

      .links path {
        //transition: opacity $trasition, fill $trasition;

        &.circular {
          stroke-dasharray: 4 4;
        }

        &[thickness='0'] {
          // Try preventing drawing line like this -=-=-=-=-=-=-
          fill: transparent;
        }

        &[selected='false'],
        &[transitively-selected='false'] {
          @include active($active: false);
        }

        &:hover,
        &[selected='true'] {
          stroke: $selection-accent-color;
          stroke-width: $active-stroke-width;
        }

        &:hover,
        &[selected='true'],
        &[transitively-selected='true'] {
          @include active($active: true);
        }

        &[searched='true'] {
          stroke: $search-accent-color;
        }

        &[focused='true'] {
          fill: $search-accent-color;
          @include search-blink('fill');
        }
      }
    }
  }
}
