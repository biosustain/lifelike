mat-sidenav {
  min-width: 320px;

  .sidenav-title {
    margin-left: 32px;
  }

  .drawer-content {
    padding: 8px;
  }
}

.html-document::ng-deep {
  a {
    // disable links as they likely do not work properly
    pointer-events: none;
  }

  img {
    // tachyons destroys spreadsheets
    max-width: unset;
  }

  td {
    // make it look lik spreadsheet
    border: 1px solid rgba(0, 0, 0, 0.05);
    padding: 3px;

    &:not([bgcolor]):hover {
      background-color: rgba(0, 0, 0, 0.025);
    }
  }

  // default libreoffice styles
  body, div, table, thead, tbody, tfoot, tr, th, td, p {
    font-size: small;
  }

  a.comment-indicator:hover + comment {
    background: #ffd;
    position: absolute;
    display: block;
    border: 1px solid black;
    padding: 0.5em;
  }

  a.comment-indicator {
    background: red;
    display: inline-block;
    border: 1px solid black;
    width: 0.5em;
    height: 0.5em;
  }

  comment {
    display: none;
  }

  // ipynb styles
  /* CSS font colors for translated ANSI escape sequences */

  .ansi-black-fg {
    color: #3E424D;
  }

  .ansi-black-bg {
    background-color: #3E424D;
  }

  .ansi-black-intense-fg {
    color: #282C36;
  }

  .ansi-black-intense-bg {
    background-color: #282C36;
  }

  .ansi-red-fg {
    color: #E75C58;
  }

  .ansi-red-bg {
    background-color: #E75C58;
  }

  .ansi-red-intense-fg {
    color: #B22B31;
  }

  .ansi-red-intense-bg {
    background-color: #B22B31;
  }

  .ansi-green-fg {
    color: #00A250;
  }

  .ansi-green-bg {
    background-color: #00A250;
  }

  .ansi-green-intense-fg {
    color: #007427;
  }

  .ansi-green-intense-bg {
    background-color: #007427;
  }

  .ansi-yellow-fg {
    color: #DDB62B;
  }

  .ansi-yellow-bg {
    background-color: #DDB62B;
  }

  .ansi-yellow-intense-fg {
    color: #B27D12;
  }

  .ansi-yellow-intense-bg {
    background-color: #B27D12;
  }

  .ansi-blue-fg {
    color: #208FFB;
  }

  .ansi-blue-bg {
    background-color: #208FFB;
  }

  .ansi-blue-intense-fg {
    color: #0065CA;
  }

  .ansi-blue-intense-bg {
    background-color: #0065CA;
  }

  .ansi-magenta-fg {
    color: #D160C4;
  }

  .ansi-magenta-bg {
    background-color: #D160C4;
  }

  .ansi-magenta-intense-fg {
    color: #A03196;
  }

  .ansi-magenta-intense-bg {
    background-color: #A03196;
  }

  .ansi-cyan-fg {
    color: #60C6C8;
  }

  .ansi-cyan-bg {
    background-color: #60C6C8;
  }

  .ansi-cyan-intense-fg {
    color: #258F8F;
  }

  .ansi-cyan-intense-bg {
    background-color: #258F8F;
  }

  .ansi-white-fg {
    color: #C5C1B4;
  }

  .ansi-white-bg {
    background-color: #C5C1B4;
  }

  .ansi-white-intense-fg {
    color: #A1A6B2;
  }

  .ansi-white-intense-bg {
    background-color: #A1A6B2;
  }

  .ansi-default-inverse-fg {
    color: #FFFFFF;
  }

  .ansi-default-inverse-bg {
    background-color: #000000;
  }

  .ansi-bold {
    font-weight: bold;
  }

  .ansi-underline {
    text-decoration: underline;
  }

  // Our own variables for this page
  $body-bg: white;
  $cell_selected_background: darken($body-bg, 2%);
  $cell_background: darken($body-bg, 3.2%);
  $border_color: darken($cell_selected_background, 31%);
  $light_border_color: darken($cell_selected_background, 17%);
  $border_width: 1px;
  $notebook_font_size: 14px;
  $notebook_line_height: 20;
  $code_line_height: 1.21429em; // changed from 1.231 to get 17px even
  $code_padding: 0.4em; // 5.6 px
  $rendered_html_border_color: black;
  $input_prompt_color: #303F9F;
  $output_prompt_color: #D84315;
  $output_pre_color: black;
  $notification_widget_bg: rgba(240, 240, 240, 0.5);


  $selected_border_color: #42A5F5;
  $selected_border_color_light: #90CAF9;
  $soft_select_color: #E3F2FD;


  $edit_mode_border_color: #66BB6A;
  $cell_padding: 6px;
  $cell_border_width: 1px;
  $cell_left_border_width: 5px;

  $navbar-default-link-color: darken(#777, 13%);
  $_cell_padding_minus_border: $cell_padding - $cell_border_width;
  $font-family-monospace: 'Monospace';
  $font-family-sans-serif: 'Sherif';

  @mixin _selected_style($border_color) {
    position: absolute;
    display: block;
    top: -1 * $cell_border_width;
    left: -1 * $cell_border_width;
    width: $cell_left_border_width;
    // height: 100% + (2 * $cell_border_width);
    height: calc(100% + #{2 * $cell_border_width});
    content: '';
    background: $border_color;
  }


  div.cell {
    border-width: $cell_border_width;
    border-style: solid;
    border-color: transparent;

    width: 100%;
    padding: $_cell_padding_minus_border;
    /* This acts as a spacer between cells, that is outside the border */
    margin: 0;
    outline: none;

    position: relative;
    overflow: visible;

    &:before {
      @include _selected_style(transparent);
    }

    &.jupyter-soft-selected {
      border-left-color: $soft_select_color;
      border-left-width: $cell_border_width;
      padding-left: $cell_padding - $cell_border_width;
      border-right-color: $soft_select_color;
      border-right-width: $cell_border_width;
      background: $soft_select_color;

      @media print {
        border-color: transparent;
      }
    }

    &.selected, &.selected.jupyter-soft-selected {
      border-color: $border_color;

      &:before {
        @include _selected_style($selected_border_color);
      }

      @media print {
        border-color: transparent;
      }
    }

    .edit_mode &.selected {
      border-color: $edit_mode_border_color;

      &:before {
        @include _selected_style($edit_mode_border_color);
      }

      @media print {
        border-color: transparent;
      }
    }

  }


  .prompt {
    /* This needs to be wide enough for 3 digit prompt numbers: In[100]: */
    min-width: 14ex;

    /* This padding is tuned to match the padding on the CodeMirror editor. */
    padding: $code_padding;
    margin: 0;
    font-family: $font-family-monospace;
    text-align: right;

    /* This has to match that of the the CodeMirror class line-height below */
    line-height: $code_line_height;

    /* Don't highlight prompt number selection */
    user-select: none;

    /* Use default cursor */
    cursor: default;
  }

  div.inner_cell {
    min-width: 0;
  }

  /* input_area and input_prompt must match in top border and margin for alignment */
  div.input_area {
    border: 1px solid $light_border_color;
    background: $cell_background;
    line-height: $code_line_height;
  }

  /* This is needed so that empty prompt areas can collapse to zero height when there
     is no content in the output_subarea and the prompt. The main purpose of this is
     to make sure that empty JavaScript output_subareas have no height. */
  div.prompt:empty {
    padding-top: 0;
    padding-bottom: 0;
  }

  div.unrecognized_cell {
    // from text_cell
    padding: 5px $_cell_padding_minus_border 5px 0;

    .inner_cell {
      padding: $_cell_padding_minus_border;
      font-weight: bold;
      color: red;
      border: $cell_border_width solid $light_border_color;
      background: darken($cell_background, 5%);
      // remove decoration from link
      a {
        color: inherit;
        text-decoration: none;

        &:hover {
          color: inherit;
          text-decoration: none;
        }
      }
    }
  }

  /* CSS for the cell toolbar */
  $celltoolbar-height: 29px;

  .celltoolbar {
    border: thin solid #CFCFCF;
    border-bottom: none;
    background: #EEE;
    width: 100%;
    -webkit-box-pack: end;
    height: $celltoolbar-height;
    padding-right: 4px;
    // safari fix, we cannot use -webkit-flex on hbox
    // and vbox either or all css get borked
    // cf https://github.com/jupyter/nbgrader/issues/394
    display: -webkit-flex;
    @media print {
      display: none;
    }
  }


  .ctb_hideshow {
    display: none;
    vertical-align: bottom;
  }

  /* ctb_show is added to the ctb_hideshow div to show the cell toolbar.
     Cell toolbars are only shown when the ctb_global_show class is also set.
  */
  .ctb_global_show .ctb_show.ctb_hideshow {
    display: block;
  }

  .ctb_global_show .ctb_show + .input_area,
  .ctb_global_show .ctb_show + div.text_cell_input,
  .ctb_global_show .ctb_show ~ div.text_cell_render {
    border-top-right-radius: 0;
    border-top-left-radius: 0;
  }

  .ctb_global_show .ctb_show ~ div.text_cell_render {
    // add border to rendered markdown cells
    border: $border_width solid $light_border_color;
  }

  .celltoolbar {
    font-size: 87%;
    padding-top: 3px;
  }

  .celltoolbar select {
    // undo some of the sizing caused by the above mixins
    width: inherit;
    font-size: inherit;
    height: 22px;
    padding: 0;

    display: inline-block;

  }

  .celltoolbar label {
    margin-left: 5px;
    margin-right: 5px;
  }

  div.code_cell {
    /* avoid page breaking on code cells when printing */
    @media print {
      page-break-inside: avoid;
    }
  }

  /* any special styling for code cells that are currently running goes here */
  div.code_cell.running {
  }

  div.input {
    page-break-inside: avoid;
  }

  div.prompt_container {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
    text-align: right;
  }

  /* input_area and input_prompt must match in top border and margin for alignment */
  div.input_prompt {
    color: $input_prompt_color;
    border-top: 1px solid transparent;
  }

  div.run_this_cell {
    display: none;
    cursor: pointer;
    color: #333;
    padding: 5px 2ex;
    width: 1ex;
  }

  // set the prompt width
  div.prompt {
    min-width: 15ex;
  }

  @media (-moz-touch-enabled: 1), (any-pointer: coarse) {
    div.run_this_cell {
      display: block;
    }
  }

  // The styles related to div.highlight are for nbconvert HTML output only. This works
  // because the .highlight div isn't present in the live notebook. We could put this into
  // nbconvert, but it easily falls out of sync, can't use our less variables and doesn't
  // help the basic template when paired with our CSS.

  div.input_area > div.highlight {
    margin: $code_padding;
    border: none;
    padding: 0;
    background-color: transparent;
  }

  div.input_area > div.highlight > pre {
    margin: 0;
    border: none;
    padding: 0;
    background-color: transparent;
  }

  /* The following gets added to the <head> if it is detected that the user has a
   * monospace font with inconsistent normal/bold/italic height.  See
   * notebookmain.js.  Such fonts will have keywords vertically offset with
   * respect to the rest of the text.  The user should select a better font.
   * See: https://github.com/ipython/ipython/issues/1503
   *
   * .CodeMirror span {
   *      vertical-align: bottom;
   * }
   */

  .CodeMirror {
    line-height: $code_line_height; /* Changed from 1em to our global default */
    font-size: $notebook_font_size;
    height: auto; /* Changed to auto to autogrow */
    background: none; /* Changed from white to allow our bg to show through */
  }

  .CodeMirror-scroll {
    /*  The CodeMirror docs are a bit fuzzy on if overflow-y should be hidden or visible.*/
    /*  We have found that if it is visible, vertical scrollbars appear with font size changes.*/
    overflow-y: hidden;
    overflow-x: auto;
  }

  .CodeMirror-lines {
    /* In CM2, this used to be 0.4em, but in CM3 it went to 4px. We need the em value because */
    /* we have set a different line-height and want this to scale with that. */
    /* Note that this should set vertical padding only, since CodeMirror assumes
       that horizontal padding will be set on CodeMirror pre */
    padding: $code_padding 0;
  }

  .CodeMirror-linenumber {
    // This is needed to fine tune the position of the line numbers because we use the 0.4em in $code_padding
    // spacing in various places. Fine tuned to look right.
    padding: 0 8px 0 4px;
  }

  .CodeMirror pre {
    /* In CM3 this went to 4px from 0 in CM2. This sets horizontal padding only,
    use .CodeMirror-lines for vertical */
    padding: 0 $code_padding;
    border: 0;
  }

  .CodeMirror-cursor {
    border-left: 1.4px solid black;
  }

  // When zoomed out 67% and 33% on a screen of 1440 width x 900 height
  @media screen and (min-width: 2138px) and (max-width: 4319px) {
    .CodeMirror-cursor {
      border-left: 2px solid black;
    }
  }

  // When zoomed out less than 33%
  @media screen and (min-width: 4320px) {
    .CodeMirror-cursor {
      border-left: 4px solid black;
    }
  }

  div.typeahead__container {
    font: revert;
  }

  ul.typeahead__list i {
    width: 18px;
  }

  ul.typeahead__list {
    max-height: 80vh;
    overflow: auto;

    & > li > a {
      /** Firefox bug **/
      /* see https://github.com/jupyter/notebook/issues/559 */
      white-space: normal;
    }
  }

  [dir="rtl"] .typeahead__list {
    text-align: right;
  }

  .cmd-palette {
    & .modal-body {
      padding: 7px;
    }

    & form {
      background: white;
    }

    & input {
      outline: none;
    }
  }

  .no-shortcut {
    min-width: 20px;
    color: transparent;
  }

  .command-shortcut:before {
    content: "(command mode)";
    padding-right: 3px;
  }

  .edit-shortcut:before {
    content: "(edit)";
    padding-right: 3px;
  }

  .completions {
    position: absolute;
    z-index: 110;
    overflow: hidden;
    border: 1px solid $border_color;
    line-height: 1;
  }

  .completions select {
    background: white;
    outline: none;
    border: none;
    padding: 0;
    margin: 0;
    overflow: auto;
    font-family: $font-family-monospace;
    font-size: 110%;
    width: auto;
  }

  $highlight-base: #000;

  .highlight-base {
    color: $highlight-base;
  }

  .highlight-variable-2 {
    color: lighten($highlight-base, 10%);
  }

  .highlight-variable-3 {
    color: lighten($highlight-base, 20%);
  }

  .highlight-string {
    color: #BA2121;
  }

  //fix issue #4206, overwrite .highlight-comment class, from #408080 to #007979
  .highlight-comment {
    color: #007979;
    font-style: italic;
  }

  .highlight-number {
    color: #080;
  }

  .highlight-atom {
    color: #88F;
  }

  .highlight-keyword {
    color: #008000;
    font-weight: bold;
  }

  .highlight-builtin {
    color: #008000;
  }

  .highlight-error {
    color: #f00;
  }

  .highlight-operator {
    color: #AA22FF;
    font-weight: bold;
  }

  .highlight-meta {
    color: #AA22FF;
  }

  #kernel_logo_widget {
    .current_kernel_logo {
      display: none;
      width: 32px;
      height: 32px;
    }
  }

  #ipython-main-app {
    height: 100%;
  }

  div#notebook_panel {
    margin: 0;
    padding: 0;
    height: 100%;
  }

  div#notebook {
    font-size: $notebook_font_size;
    line-height: $notebook_line_height;
    overflow-y: hidden;
    overflow-x: auto;
    width: 100%;
    margin: 0;
    outline: none;
    min-height: 100%;
  }

  #notebook-container {
    @media print {
      width: 100%;
    }
  }

  div.ui-widget-content {
    border: 1px solid $border_color;
    outline: none;
  }

  pre.dialog {
    background-color: $cell_background;
    border: 1px solid #ddd;
    padding: 0.4em 0.4em 0.4em 2em;
  }

  p.dialog {
    padding: 0.2em;
  }

  /* Word-wrap output correctly.  This is the CSS3 spelling, though Firefox seems
     to not honor it correctly.  Webkit browsers (Chrome, rekonq, Safari) do.
   */
  pre, code, kbd, samp {
    white-space: pre-wrap;
  }

  #fonttest {
    font-family: $font-family-monospace;
  }

  p {
    margin-bottom: 0;
  }

  .end_space {
    min-height: 100px;
    transition: height .2s ease;
  }

  kbd {
    border-style: solid;
    border-width: 1px;
    box-shadow: none;
    margin: 2px;
    padding: 1px 2px;
  }

  .jupyter-keybindings {
    padding: 1px;
    line-height: 24px;
    border-bottom: 1px solid gray;
  }

  .jupyter-keybindings input {
    margin: 0;
    padding: 0;
    border: none;
  }

  .jupyter-keybindings i {
    padding: 6px;
  }

  .well code {
    background-color: lighten($cell_background, 5%);
    border-color: $border_color;
    border-width: $border_width;
    border-style: solid;
    padding: 1px 2px;
  }

  div.output_wrapper {
    /* this position must be relative to enable descendents to be absolute within it */
    position: relative;
    // avoid scrolled output overlaying input in some strange circumstances
    z-index: 1;
  }

  /* class for the output area when it should be height-limited */
  div.output_scroll {
    /* ideally, this would be max-height, but FF barfs all over that */
    height: 24em;
    /* FF needs this *and the wrapper* to specify full width, or it will shrinkwrap */
    width: 100%;

    overflow: auto;
    display: block;
  }

  /* output div while it is collapsed */
  div.output_collapsed {
    margin: 0;
    padding: 0;
  }

  div.out_prompt_overlay {
    height: 100%;
    padding: 0 $code_padding;
    position: absolute;
  }

  div.out_prompt_overlay:hover {
    background: rgba(240, 240, 240, 0.5);
  }

  div.output_prompt {
    color: $output_prompt_color;
  }

  /* This class is the outer container of all output sections. */
  div.output_area {
    padding: 0;
    page-break-inside: avoid;

    .MathJax_Display {
      // Inside a CodeCell, elements are left justified
      text-align: left !important;
    }

    .rendered_html {
      // Inside a CodeCell, elements are left justified
      table {
        margin-left: 0;
        margin-right: 0;
      }

      img {
        margin-left: 0;
        margin-right: 0;
      }
    }

    img, svg {
      max-width: 100%;
      height: auto;

      &.unconfined {
        max-width: none;
      }
    }

    .mglyph > img {
      max-width: none;
    }
  }

  div.output_area pre {
    margin: 0;
    padding: 1px 0 1px 0;
    border: 0;
    vertical-align: baseline;
    color: $output_pre_color;
    background-color: transparent;
  }

  /* This class is for the output subarea inside the output_area and after
     the prompt div. */
  div.output_subarea {
    // Don't let contents overflow page area.
    overflow-x: auto;
    padding: $code_padding;
    // appears to be needed for max-width in children to mean anything on Firefox:
    max-width: calc(#{"100% - 14ex"});
  }

  div.output_scroll div.output_subarea {
    // if the output area is scrolling, we don't need scrollbars on the subarea
    overflow-x: visible;
  }

  /* The rest of the output_* classes are for special styling of the different
     output types */

  /* all text output has this class: */
  div.output_text {
    text-align: left;
    /* This has to match that of the the CodeMirror class line-height below */
    line-height: $code_line_height;
  }

  /* stdout/stderr are 'text' as well as 'stream', but execute_result/error are *not* streams */
  div.output_stream {
  }

  div.output_stdout {
  }

  div.output_stderr {
    background: #fdd; /* very light red background for stderr */
  }

  div.output_latex {
    text-align: left;
  }

  div.output_html {
  }

  div.output_png {
  }

  div.output_jpeg {
  }

  /* Empty output_javascript divs should have no height */
  div.output_javascript:empty {
    padding: 0;
  }

  .js-error {
    color: darkred;
  }

  /* raw_input styles */

  div.raw_input_container {
    line-height: $code_line_height;
    // for some reason, em padding doesn't compute the same for raw_input
    // that is not the first input, but px does
    padding-top: 5px;
  }

  pre.raw_input_prompt {
    /* nothing needed here. */
  }

  input.raw_input {
    font-family: $font-family-monospace;
    font-size: inherit;
    color: inherit;
    width: auto;
    /* make sure input baseline aligns with prompt */
    vertical-align: baseline;
    /* padding + margin = 0.5em between prompt and cursor */
    padding: 0 0.25em;
    margin: 0 0.25em;
  }

  input.raw_input:focus {
    box-shadow: none;
  }

  p.p-space {
    margin-bottom: 10px;
  }

  div.output_unrecognized {
    padding: 5px;
    font-weight: bold;
    color: red;
    // remove decoration from link
    a {
      color: inherit;
      text-decoration: none;

      &:hover {
        color: inherit;
        text-decoration: none;
      }
    }
  }

  div.output_text[dir="rtl"] {
    text-align: right;
  }

  .rendered_html {


    em {
      font-style: italic;
    }

    strong {
      font-weight: bold;
    }

    u {
      text-decoration: underline;
    }

    :link {
      text-decoration: underline;
    }

    :visited {
      text-decoration: underline;
    }

    // For a 14px base font size this goes as:
    // font-size = 26, 22, 18, 14, 12, 12
    // margin-top = 14, 14, 14, 14, 8, 8
    h1 {
      font-size: 185.7%;
      margin: 1.08em 0 0 0;
      font-weight: bold;
      line-height: 1.0;
    }

    h2 {
      font-size: 157.1%;
      margin: 1.27em 0 0 0;
      font-weight: bold;
      line-height: 1.0;
    }

    h3 {
      font-size: 128.6%;
      margin: 1.55em 0 0 0;
      font-weight: bold;
      line-height: 1.0;
    }

    h4 {
      font-size: 100%;
      margin: 2em 0 0 0;
      font-weight: bold;
      line-height: 1.0;
    }

    h5 {
      font-size: 100%;
      margin: 2em 0 0 0;
      font-weight: bold;
      line-height: 1.0;
      font-style: italic;
    }

    h6 {
      font-size: 100%;
      margin: 2em 0 0 0;
      font-weight: bold;
      line-height: 1.0;
      font-style: italic;
    }

    // Reduce the top margins by 14px compared to above
    h1:first-child {
      margin-top: 0.538em;
    }

    h2:first-child {
      margin-top: 0.636em;
    }

    h3:first-child {
      margin-top: 0.777em;
    }

    h4:first-child {
      margin-top: 1em;
    }

    h5:first-child {
      margin-top: 1em;
    }

    h6:first-child {
      margin-top: 1em;
    }

    ul:not(.list-inline),
    ol:not(.list-inline) {
      padding-left: 2em;
    }

    ul {
      list-style: disc;
    }

    ul ul {
      list-style: square;
      margin-top: 0;
    }

    ul ul ul {
      list-style: circle;
    }

    ol {
      list-style: decimal;
    }

    ol ol {
      list-style: upper-alpha;
      margin-top: 0;
    }

    ol ol ol {
      list-style: lower-alpha;
    }

    ol ol ol ol {
      list-style: lower-roman;
    }

    /* any extras will just be numbers: */
    ol ol ol ol ol {
      list-style: decimal;
    }

    * + ul {
      margin-top: 1em;
    }

    * + ol {
      margin-top: 1em;
    }

    hr {
      color: $rendered_html_border_color;
      background-color: $rendered_html_border_color;
    }

    pre {
      margin: 1em 2em;
      padding: 0;
      background-color: $body-bg;
    }

    code {
      background-color: #eff0f1;
    }

    p code {
      padding: 1px 5px;
    }

    pre code {
      background-color: $body-bg;
    }

    pre, code {
      border: 0;
      font-size: 100%;
    }

    blockquote {
      margin: 1em 2em;
    }

    table {
      margin-left: auto;
      margin-right: auto;
      border: none;
      border-collapse: collapse;
      border-spacing: 0;
      color: $rendered_html_border_color;
      font-size: 12px;
      table-layout: fixed;
    }

    thead {
      border-bottom: 1px solid $rendered_html_border_color;
      vertical-align: bottom;
    }

    tr, th, td {
      text-align: right;
      vertical-align: middle;
      padding: 0.5em 0.5em;
      line-height: normal;
      white-space: normal;
      max-width: none;
      border: none;
    }

    th {
      font-weight: bold;
    }

    tbody tr:nth-child(odd) {
      background: #f5f5f5;
    }

    tbody tr:hover {
      background: rgba(66, 165, 245, 0.2);
    }

    * + table {
      margin-top: 1em;
    }

    p {
      text-align: left;
    }

    * + p {
      margin-top: 1em;
    }

    img {
      display: block;
      margin-left: auto;
      margin-right: auto;
    }

    * + img {
      margin-top: 1em;
    }

    img, svg {
      max-width: 100%;
      height: auto;

      &.unconfined {
        max-width: none;
      }
    }

    // Override bootstrap settings, see #1390
    .alert {
      margin-bottom: initial;
    }

    * + .alert {
      margin-top: 1em;
    }
  }

  // Right align text iff:
  // (a) notebook is rtl and it's not overriden in cell metadata (i.e. rtl or none)
  // (b) notebook is whatever but cell metadata specifies rtl
  // note that cell metadata is used to set 'dir' attribute of rendered_html element.
  [dir="rtl"] .rendered_html:not([dir="ltr"]), .rendered_html[dir="rtl"] {
    p {
      text-align: right;
    }
  }

  div.text_cell_render {
    /*font-family: "Helvetica Neue", Arial, Helvetica, Geneva, sans-serif;*/
    outline: none;
    resize: none;
    width: inherit;
    border-style: none;
    padding: 0.5em 0.5em 0.5em $code_padding;
  }

  a.anchor-link:link {
    text-decoration: none;
    padding: 0 20px;
    visibility: hidden;
  }

  h1, h2, h3, h4, h5, h6 {
    &:hover .anchor-link {
      visibility: visible;
    }
  }

  .text_cell.rendered .input_area {
    display: none;
  }

  .text_cell.rendered .rendered_html {
    overflow-x: auto;

    // Content in the y direction should cause the rendered content to grow,
    // the overflow-x: auto causes chrome to assume the same of y, so we need
    // to tell it explicitly otherwise.
    overflow-y: hidden;
  }

  .text_cell.rendered .rendered_html {
    tr, th, td {
      max-width: none;
    }
  }

  .text_cell.unrendered .text_cell_render {
    display: none;
  }

  .text_cell .dropzone .input_area {
    border: 2px dashed #bababa;
    margin: -1px;
  }

  .cm-header-1,
  .cm-header-2,
  .cm-header-3,
  .cm-header-4,
  .cm-header-5,
  .cm-header-6 {
    font-weight: bold;
    font-family: $font-family-sans-serif;
  }

  .cm-header-1 {
    font-size: 185.7%;
  }

  .cm-header-2 {
    font-size: 157.1%;
  }

  .cm-header-3 {
    font-size: 128.6%;
  }

  .cm-header-4 {
    font-size: 110%;
  }

  .cm-header-5 {
    font-size: 100%;
    font-style: italic;
  }

  .cm-header-6 {
    font-size: 100%;
    font-style: italic;
  }
}

