:host {
  $first-column-width: 6em;
  $column-header-angle: 45deg;
  $tooltip-arrow-height: 0.4rem;
  $tooltip-arrow-width: 2*$tooltip-arrow-height;
  $background-color: white;
  $background-color-90-percent: rgba(255, 255, 255, 0.9);
  $stripe-color: #F2F2F2;
  $stripe-border-color: #e9ecef;
  $stripe-border-size: 1px;
  $column-header-scrollable-height: 16em;
  $column-header-sticky-height: 6em;
  $row-header-sticky-width: 6em;

  @mixin stripes {
    background-image: repeating-linear-gradient(
                    $stripe-border-color 0,
                    $stripe-border-color $stripe-border-size,
                    $stripe-color $stripe-border-size,
                    $stripe-color calc(var(--sizeY) - #{$stripe-border-size}),
                    $stripe-border-color calc(var(--sizeY) - #{$stripe-border-size}),
                    $stripe-border-color var(--sizeY),
                    $background-color var(--sizeY),
                    $background-color calc(var(--sizeY) * 2)
    );
  }

  position: relative;
  height: 100%;
  display: block;
  font-size: var(--sizeX);

  @keyframes forceScroll {
    0% {
      scroll-snap-type: y mandatory;
    }
    100% {
      scroll-snap-type: y proximity;
    }
  }

  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    background-image: linear-gradient(180deg, $background-color 0, transparent 1.5em);
    z-index: 1;
  }

  // Scrolling container.
  app-grid-virtual-scroll-viewport {
    position: relative;
    overflow: auto;
    scroll-padding-top: $first-column-width;
    // force scroll only on load
    display: grid;
    grid-template-areas:
    "cover spacer"
    "cover columnheader"
    "rowheader content";
    animation: 0.01s 0s 1 forceScroll;
    contain: strict;
    max-height: 100%;
    min-height: 300px;
    height: 300px;
    transform: translateZ(0);
    will-change: scroll-position;
    -webkit-overflow-scrolling: touch;
    font-size: calc(0.35 * var(--sizeX));

    &:after {
      content: "";
      grid-area: cover;
      position: sticky;
      top: -$column-header-scrollable-height;
      left: 0;
      background-color: $background-color;
      border-right: 1px solid $stripe-border-color;
      border-bottom: 1px solid $stripe-border-color;
    }

    &:before {
      content: "";
      grid-area: spacer;
      height: $column-header-scrollable-height;
    }


    .columnHeader {
      grid-area: columnheader;
      position: sticky;
      top: 0;
      height: $column-header-sticky-height;
      background-color: $background-color;
      color: #6c757d;
      font-weight: bold;
      border-bottom: 1px solid $stripe-border-color;

      & > * {
        position: absolute;
        bottom: 0.5em;
        width: var(--sizeX);
      }


      .rotatedHeader {
        transform-origin: 0 50%;
        transform: translateX(calc(var(--sizeX) / 2)) rotate(-45deg);

        & span {
          width: max-content;
          overflow-wrap: initial;
          display: block;
        }

        &::ng-deep .rotatedTooltip {
          display: none;

          &.show {
            display: block;
          }

          .arrow {
            position: absolute;
            display: block;
            width: $tooltip-arrow-width;
            height: $tooltip-arrow-height;

            &::before {
              position: absolute;
              content: "";
              border-style: solid;
            }
          }

          &.bs-tooltip-bottom-right, &.bs-tooltip-right-bottom {
            padding: $tooltip-arrow-height 0;

            .tooltip-inner {
              border-top-left-radius: 0;
              transform-origin: 50% 0;
              transform: translateX(50%) rotate(
                              $column-header-angle
              ) translate(2*$tooltip-arrow-height, 2*$tooltip-arrow-height);
            }

            .arrow {
              display: none;
            }
          }

          &.bs-tooltip-bottom-left, &.bs-tooltip-left-bottom {
            padding: $tooltip-arrow-height 0;
            transform: none !important;

            .tooltip-inner {
              border-top-right-radius: 0;
              transform-origin: 0 0;
              transform: rotate(
                              $column-header-angle
              ) translate(-100%, 0);
            }

            .arrow {
              display: none;
            }
          }

          // Code for non-used tooltip placements
          //&.bs-tooltip-top-right, &.bs-tooltip-right-top {
          //  padding: $tooltip-arrow-height 0;
          //  transform: none !important;
          //  left: unset;
          //  right: 0;
          //
          //  .tooltip-inner {
          //    border-bottom-left-radius: 0;
          //    transform-origin: 100% 0;
          //    transform: rotate($column-header-angle) translate(100%, -100%);
          //  }
          //
          //  .arrow {
          //    display: none;
          //  }
          //}

          //&.bs-tooltip-top-left, &.bs-tooltip-left-top {
          //  padding: $tooltip-arrow-height 0;
          //
          //  .tooltip-inner {
          //    border-bottom-right-radius: 0;
          //    transform-origin: 50% 100%;
          //    transform: translateX(-50%) rotate(
          //                    $column-header-angle
          //    ) translate(2*$tooltip-arrow-height, 2*$tooltip-arrow-height);
          //  }
          //
          //  .arrow {
          //    display: none;
          //  }
          //}
          //
          //&.bs-tooltip-top {
          //  padding: $tooltip-arrow-height 0;
          //
          //  &:not(.bs-tooltip-top-right):not(.bs-tooltip-right-top) {
          //    transform-origin: 50% 50%;
          //    transform: translateY(-50%) rotate(
          //                    $column-header-angle
          //    ) translateY(-50%) !important;
          //  }
          //
          //  .arrow {
          //    bottom: 0;
          //
          //    &::before {
          //      top: 0;
          //      border-width: $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
          //    }
          //  }
          //}
          //
          //&.bs-tooltip-right {
          //  padding: 0 $tooltip-arrow-height;
          //
          //  .tooltip-inner, .arrow {
          //    transform-origin: 0 50%;
          //    transform: rotate($column-header-angle) translateX(-2*$tooltip-arrow-height);
          //  }
          //
          //  .arrow {
          //    left: 0;
          //    width: $tooltip-arrow-height;
          //    height: $tooltip-arrow-width;
          //
          //    &::before {
          //      right: 0;
          //      border-width: ($tooltip-arrow-width / 2) $tooltip-arrow-height ($tooltip-arrow-width / 2) 0;
          //    }
          //  }
          //}
          //
          //&.bs-tooltip-bottom {
          //  padding: $tooltip-arrow-height 0;
          //
          //  &:not(.bs-tooltip-bottom-right):not(.bs-tooltip-right-bottom):not(.bs-tooltip-bottom-left):not(.bs-tooltip-left-bottom) {
          //    transform-origin: 50% 0;
          //    transform: rotate(
          //                    $column-header-angle
          //    ) translateY(100%) !important;
          //  }
          //
          //
          //  .arrow {
          //    top: 0;
          //
          //    &::before {
          //      bottom: 0;
          //      border-width: 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
          //    }
          //  }
          //}
          //
          //&.bs-tooltip-left {
          //  padding: 0 $tooltip-arrow-height;
          //
          //  .tooltip-inner, .arrow {
          //    transform-origin: 100% 50%;
          //    transform: rotate($column-header-angle) translateX(2*$tooltip-arrow-height);
          //  }
          //
          //  .arrow {
          //    right: 0;
          //    width: $tooltip-arrow-height;
          //    height: $tooltip-arrow-width;
          //
          //    &::before {
          //      left: 0;
          //      border-width: ($tooltip-arrow-width / 2) 0 ($tooltip-arrow-width / 2) $tooltip-arrow-height;
          //    }
          //  }
          //}
          //
          //&.bs-tooltip-auto {
          //  &[x-placement^="top"] {
          //    @extend .bs-tooltip-top;
          //  }
          //
          //  &[x-placement^="right"] {
          //    @extend .bs-tooltip-right;
          //  }
          //
          //  &[x-placement^="bottom"] {
          //    @extend .bs-tooltip-bottom;
          //  }
          //
          //  &[x-placement^="left"] {
          //    @extend .bs-tooltip-left;
          //  }
          //}
        }
      }
    }

    .rowHeader {
      grid-area: rowheader;
      scroll-snap-align: start;
      position: sticky;
      left: 0;
      width: $row-header-sticky-width;
      @include stripes;
      font-weight: bold;
      font-size: 1.2em;
      border-right: 1px solid $stripe-border-color;
      justify-self: end;

      & > * {
        position: absolute;
        overflow: hidden;
        width: 100%;
        height: 2em;
        cursor: pointer;
        padding: 0.5em;
      }
    }

    // Wrapper element for the rendered content. This element will be transformed to push the rendered
    // content to its correct offset in the data set as a whole.
    .content {
      grid-area: content;
      position: absolute;
      top: 0;
      left: 0;
      font-size: 1.2em;

      // Note: We can't put `will-change: transform;` here because it causes Safari to not update the
      // viewport's `scrollHeight` when the spacer's transform changes.

      min-height: 100%;
      min-width: 100%;

      & > * {
        position: absolute;
        overflow: hidden;
        border-left: 1px solid $background-color;
        opacity: 0.3;
      }

      .match {
        border-bottom: 1px solid $background-color;
        width: var(--sizeX);
        height: var(--sizeY);
      }

      .others {
        // padding + 3 chars
        width: calc(0.9rem + 3ch) !important;
        min-width: calc(0.9rem + 3ch) !important;
        white-space: pre;
        padding: 0.4em 0;
        text-align: center;
      }
    }

    // Spacer element that whose width or height will be adjusted to match the size of the entire data
    // set if it were rendered all at once. This ensures that the scrollable content region is the
    // correct size.
    .scrollSpacer {
      grid-area: content;
      position: absolute;
      top: 0;
      left: 0;
      height: 1px;
      width: 1px;
      transform-origin: 0 0;
      z-index: -1;

      @include stripes
      // Note: We can't put `will-change: transform;` here because it causes Safari to not update the
      // viewport's `scrollHeight` when the spacer's transform changes.
    }
  }
}
