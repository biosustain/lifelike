version: '3.8'

services:

    proxy:
        container_name: proxy
        image: traefik:v2.2
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        command:
            - --providers.docker
            - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
            - --providers.docker.exposedbydefault=false
            - --providers.docker.swarmmode
            - --accesslog
            - --log
            - --api
        deploy:
            placement:
                constraints:
                    - node.role == manager
            labels:
                - traefik.enable=true
                - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
                - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
                - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
                - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
                - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect
        networks:
            - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
            - default

    appserver:
        container_name: appserver
        image: ${REGISTRY:-lifelike.azurecr.io}/kg-appserver:${GITHUB_HASH:-latest}
        build:
            context: ../appserver
            dockerfile: Dockerfile
        depends_on:
            - redis
            - pdfparser

    cache-invalidator:
        container_name: cache-invalidator
        image: ${REGISTRY:-lifelike.azurecr.io}/kg-cache-invalidator:${GITHUB_HASH:-latest}
        build:
            context: ../cache-invalidator
            dockerfile: Dockerfile
        depends_on:
            - redis

    webserver:
        container_name: webserver
        image: ${REGISTRY:-lifelike.azurecr.io}/kg-webserver:${GITHUB_HASH:-latest}
        build:
            context: ../client
            dockerfile: Dockerfile
            target: webserver
        deploy:
            labels:
                - traefik.enable=true
                - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
                - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`) || PathPrefix(`/api`)
                - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80
        depends_on:
            - appserver

    pdfparser:
        container_name: pdfparser
        image: ${REGISTRY:-lifelike.azurecr.io}/kg-pdfparser:latest
        tty: true

    filebeat:
        container_name: filebeat
        image: ${REGISTRY:-lifelike.azurecr.io}/filebeat:${GITHUB_HASH:-latest}

    redis:
        container_name: redis
        image: redis:6.0.3-alpine
        command: redis-server --requirepass ${REDIS_PASSWORD}

networks:
    traefik-public:
        # Set to false for testing
        external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
