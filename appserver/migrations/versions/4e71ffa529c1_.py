"""Deduplicate file uploads

Revision ID: 4e71ffa529c1
Revises: 7998c4d9f557
Create Date: 2020-04-28 18:59:14.406301

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4e71ffa529c1'
down_revision = '7998c4d9f557'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('files_content',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('raw_file', sa.LargeBinary(), nullable=False),
    sa.Column('checksum_sha256', sa.Binary(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_files_content'))
    )
    op.create_index(op.f('ix_files_content_checksum_sha256'), 'files_content', ['checksum_sha256'], unique=False)
    op.add_column('files', sa.Column('content_id', sa.Integer(), nullable=True))
    op.alter_column('files', 'raw_file',
               existing_type=postgresql.BYTEA(),
               nullable=True)
    op.create_foreign_key(op.f('fk_files_content_id_files_content'), 'files', 'files_content', ['content_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_files_content_id_files_content'), 'files', type_='foreignkey')
    op.alter_column('files', 'raw_file',
               existing_type=postgresql.BYTEA(),
               nullable=False)
    op.drop_column('files', 'content_id')
    op.drop_index(op.f('ix_files_content_checksum_sha256'), table_name='files_content')
    op.drop_table('files_content')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
