"""Add author for directory

Revision ID: 36d25e171658
Revises: 101b9a60aa29
Create Date: 2020-07-22 19:25:59.212662

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.orm.session import Session

from neo4japp.models import (
    AppRole,
    AppUser,
    AccessControlPolicy,
    AccessActionType,
    AccessRuleType,
    Directory,
    Files,
    Project,
    Projects,
    projects_collaborator_role,
)

# revision identifiers, used by Alembic.
revision = '36d25e171658'
down_revision = '101b9a60aa29'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('directory', sa.Column('user_id', sa.Integer(), nullable=True))
    op.create_foreign_key(
        op.f('fk_directory_user_id_appuser'),
        'directory', 'appuser', ['user_id'], ['id']
    )
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_directory_user_id_appuser'), 'directory', type_='foreignkey')
    op.drop_column('directory', 'user_id')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    
    # Code block for data upgrade was intially in 3b70d9c2c76f_.py
    # but moved here and modified to allow dev envionrment
    # to do data-migration for beta-project after all schema-migration
    # to directory is done

    session = Session(op.get_bind())

    # There's only one hardcoded project right now
    projects = session.query(Projects).filter(Projects.project_name == 'beta-project').one_or_none()

    # This will only be true in development
    if not projects:
        projects = Projects(
            project_name='beta-project',
            description='',
            users=[],
        )
        session.add(projects)
        session.flush()

        # Bucket everything into a single directory
        directory = Directory(
            name='/',
            directory_parent_id=None,
            projects_id=projects.id,
        )

        session.add(directory)
        session.flush()

        # Get writer role
        write_role = session.query(AppRole).filter(
            AppRole.name == 'project-write'
        ).one()

        # Set all existing users to write role
        for user in session.query(AppUser).all():
            session.execute(
                projects_collaborator_role.insert(),
                [dict(
                    appuser_id=user.id,
                    projects_id=projects.id,
                    app_role_id=write_role.id,
                )]
            )
            session.flush()

        for fi in session.query(Files).all():
            setattr(fi, 'dir_id', directory.id)
            session.add(fi)

        for proj in session.query(Project).all():
            setattr(proj, 'dir_id', directory.id)
            session.add(proj)

        session.commit()


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
