"""New annotations column for Files table,
as well as fixing existing columns to have
appropriate type and names.

Revision ID: cf17ca58ca2e
Revises: 59b6851c654e
Create Date: 2020-04-05 04:42:26.699971

"""
from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cf17ca58ca2e'
down_revision = '59b6851c654e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('files', sa.Column('annotations', postgresql.JSONB(astext_type=sa.Text()), server_default='[]', nullable=False))
    op.add_column('files', sa.Column('file_id', sa.String(length=36), nullable=False))
    op.add_column('files', sa.Column('raw_file', sa.LargeBinary(), nullable=False))
    op.alter_column('files', 'filename',
               existing_type=sa.VARCHAR(length=60),
               nullable=False)
    op.alter_column('files', 'id',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               postgresql_using='id::integer',
               autoincrement=True)
    op.create_unique_constraint(op.f('uq_files_file_id'), 'files', ['file_id'])
    op.drop_column('files', 'file')
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('files', sa.Column('file', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('uq_files_file_id'), 'files', type_='unique')
    op.alter_column('files', 'id',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               postgresql_using='id::varchar',
               autoincrement=True)
    op.alter_column('files', 'filename',
               existing_type=sa.VARCHAR(length=60),
               nullable=True)
    op.drop_column('files', 'raw_file')
    op.drop_column('files', 'file_id')
    op.drop_column('files', 'annotations')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
