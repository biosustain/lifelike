"""Create project version column 

Revision ID: 39d1bd911e85
Revises: 7fb303ae343b
Create Date: 2020-08-11 16:23:51.889418

"""
from alembic import context
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '39d1bd911e85'
down_revision = '7fb303ae343b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('project_version', sa.Column('hash_id', sa.String(length=50), nullable=True))
    op.create_unique_constraint(op.f('uq_project_version_hash_id'), 'project_version', ['hash_id'])
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_project_version_hash_id'), 'project_version', type_='unique')
    op.drop_column('project_version', 'hash_id')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
