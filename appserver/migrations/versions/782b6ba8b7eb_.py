"""empty message

Revision ID: 782b6ba8b7eb
Revises: a84e5653318c
Create Date: 2020-05-04 23:15:48.765478

"""
from os import path

from alembic import context
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm.session import Session

from neo4japp.models import OrganismGeneMatch


# revision identifiers, used by Alembic.
revision = '782b6ba8b7eb'
down_revision = 'a84e5653318c'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organism_gene_match',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('gene_id', sa.String(length=128), nullable=False),
    sa.Column('gene_name', sa.String(length=128), nullable=False),
    sa.Column('synonym', sa.String(length=128), nullable=False),
    sa.Column('taxonomy_id', sa.String(length=128), nullable=False),
    sa.Column('organism', sa.String(length=128), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_organism_gene_match'))
    )
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('organism_gene_match')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    session = Session(op.get_bind())

    # reference to this directory
    directory = path.realpath(path.dirname(__file__))

    rows = []
    with open(path.join(directory, '../upgrade_data/gene_names_for_4organisms.csv'), 'r') as f:
        for i, line in enumerate(f.readlines()):
            if i == 0:
                continue

            # GeneID,GeneName,Synonym,Tax_ID, Organism
            data = line.split(',')

            row = OrganismGeneMatch(
                gene_id=data[0].strip(),
                gene_name=data[1].strip(),
                synonym=data[2].strip(),
                taxonomy_id=data[3].strip(),
                organism=data[4].strip(),
            )
            rows.append(row)

            if i % 1000 == 0:
                session.bulk_save_objects(rows)
                session.flush()
                rows = []
    session.commit()


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
