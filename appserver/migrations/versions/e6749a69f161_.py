"""Store a user FK on file uploads

Revision ID: e6749a69f161
Revises: 7998c4d9f557
Create Date: 2020-04-28 17:30:44.929788

"""
from alembic import context
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e6749a69f161'
down_revision = '7998c4d9f557'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('files', sa.Column('user_id', sa.Integer(), nullable=True))
    op.alter_column('files', 'username',
               existing_type=sa.VARCHAR(length=30),
               type_=sa.String(length=64),
               existing_nullable=True)
    op.create_foreign_key(op.f('fk_files_user_id_appuser'), 'files', 'appuser', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###
    if context.get_x_argument(as_dictionary=True).get('data_migrate', None):
        data_upgrades()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_files_user_id_appuser'), 'files', type_='foreignkey')
    op.alter_column('files', 'username',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=30),
               existing_nullable=True)
    op.drop_column('files', 'user_id')
    # ### end Alembic commands ###
    # NOTE: In practice perfect downgrades are difficult and in some cases
    # impossible! It is more practical to use database backups/snapshots to
    # "downgrade" the database. Changes to the database that we intend to
    # push to production should always be added to a NEW migration.
    # (i.e. "downgrade forward"!)


def data_upgrades():
    """Add optional data upgrade migrations here"""
    pass


def data_downgrades():
    """Add optional data downgrade migrations here"""
    pass
